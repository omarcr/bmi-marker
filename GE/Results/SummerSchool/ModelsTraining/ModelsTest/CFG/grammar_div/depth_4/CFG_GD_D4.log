{MutationProb=0.05, ChangeProbabilityDynamic=0.25, Executions=10, TrainingPath=C:\Users\omgmv\Documents\PMT - Grammar2\Data\train_bmi_marker.csv, MutationTypeDynamic=All genes, GrammaticalEvolutionType=4, ValidationPath=C:\Users\omgmv\Documents\PMT\Data\test_bmi_marker.csv, Objectives=0, ClassPathSeparator=;, TestPath=C:\Users\omgmv\Documents\PMT\Data\test_bmi_marker.csv, NumGenerations=1000, NumIndividuals=1024, RealDataCopied=0, ErrorThreshold=0.0, TypeOfDepthForDynamicSGE=0, TournamentSize=5, ModelWidth=0, BnfPathFile=C:\Users\omgmv\Documents\PMT - Grammar2\exp4\exp4_con_division.bnf, LoggerLevel=INFO, LoggerBasePath=C:\Users\omgmv\Documents\PMT\work, AlgorithmType=1, CrossoverTypeDynamic=Uniform, ViewResults=false, LogPopulation=0, CrossoverProb=0.9, MaxTreeDepth=4, WorkDir=C:\Users\omgmv\Documents\PMT, NormalizeData=false}
Tree: true
Depth: 4
Aug 31, 2024 1:14:05 AM data.NormalizedDataTable <init>
INFO: Reading data file ...

Detecting file format ...


Detecting file format ...

Aug 31, 2024 1:14:05 AM data.NormalizedDataTable <init>
INFO: ... done.
jeco.core.algorithm.ga.StaticSimpleGeneticAlgorithm@6f299517
algorithm.Tree_CFG_GP@6cc0b31b

Run #0
========
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=1.054036019009674E8; Expression=55*Math.pow(10,+4)*u9(k)-u7(k)-64*Math.pow(10,-5)+u1(k)/26*Math.pow(10,+9)/u4(k)+u9(k); Java Expression: 55*Math.pow(10,+4)*getVariable(9,k)-getVariable(7,k)-64*Math.pow(10,-5)+getVariable(1,k)/26*Math.pow(10,+9)/getVariable(4,k)+getVariable(9,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4826.525425545529; Expression=u3(k)/u8(k)-50*Math.pow(10,+2)-u1(k)*u4(k)/u9(k)/u3(k)/52*Math.pow(10,-1)+u8(k)+u1(k)+u6(k); Java Expression: getVariable(3,k)/getVariable(8,k)-50*Math.pow(10,+2)-getVariable(1,k)*getVariable(4,k)/getVariable(9,k)/getVariable(3,k)/52*Math.pow(10,-1)+getVariable(8,k)+getVariable(1,k)+getVariable(6,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=195.27712474963278; Expression=39*Math.pow(10,+2)/u5(k)+u7(k)+u1(k)-u3(k)-u1(k)/u6(k)-u4(k); Java Expression: 39*Math.pow(10,+2)/getVariable(5,k)+getVariable(7,k)+getVariable(1,k)-getVariable(3,k)-getVariable(1,k)/getVariable(6,k)-getVariable(4,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=31.86906534089751; Expression=9*Math.pow(10,-1)+u8(k); Java Expression: 9*Math.pow(10,-1)+getVariable(8,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.306121959491481; Expression=u4(k)-u8(k); Java Expression: getVariable(4,k)-getVariable(8,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.33062357205048; Expression=41*Math.pow(10,-9)/u9(k)*u5(k)+u5(k)+u4(k)/u9(k)/u2(k)-24*Math.pow(10,-8)*u1(k); Java Expression: 41*Math.pow(10,-9)/getVariable(9,k)*getVariable(5,k)+getVariable(5,k)+getVariable(4,k)/getVariable(9,k)/getVariable(2,k)-24*Math.pow(10,-8)*getVariable(1,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.33024516417838; Expression=1*Math.pow(10,-2)+u5(k); Java Expression: 1*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 1:14:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.327633708624557; Expression=83*Math.pow(10,-1)/u2(k)+u5(k)+73*Math.pow(10,-8)/u8(k)*u9(k)/u2(k)*48*Math.pow(10,-5)*u6(k); Java Expression: 83*Math.pow(10,-1)/getVariable(2,k)+getVariable(5,k)+73*Math.pow(10,-8)/getVariable(8,k)*getVariable(9,k)/getVariable(2,k)*48*Math.pow(10,-5)*getVariable(6,k)
Aug 31, 2024 1:14:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 1:14:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.862169550314533; Expression=55*Math.pow(10,+2)/u2(k)-u8(k)/u3(k)*u7(k)/u1(k)/u7(k)/u3(k)/u2(k); Java Expression: 55*Math.pow(10,+2)/getVariable(2,k)-getVariable(8,k)/getVariable(3,k)*getVariable(7,k)/getVariable(1,k)/getVariable(7,k)/getVariable(3,k)/getVariable(2,k)
Aug 31, 2024 1:14:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.420752558560338; Expression=35*Math.pow(10,-2)*u6(k); Java Expression: 35*Math.pow(10,-2)*getVariable(6,k)
Aug 31, 2024 1:14:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.130907512559013; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u4(k)+u7(k)-u5(k)-u3(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(4,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.13086168750186; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-u5(k)-u3(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.130777033199208; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u5(k)+u7(k)-u5(k)-u3(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(5,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.083815620747904; Expression=39*Math.pow(10,+3)*24*Math.pow(10,-5)/u9(k)+u7(k)-u5(k)-u3(k); Java Expression: 39*Math.pow(10,+3)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.078148878715162; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427490840786; Expression=39*Math.pow(10,+1)*1*Math.pow(10,-9)/u9(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*1*Math.pow(10,-9)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427490233277; Expression=39*Math.pow(10,+1)*1*Math.pow(10,-9)/u5(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*1*Math.pow(10,-9)/getVariable(5,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.07742748859586; Expression=39*Math.pow(10,+1)*1*Math.pow(10,-9)/u1(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*1*Math.pow(10,-9)/getVariable(1,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.07742748786789; Expression=39*Math.pow(10,-1)*1*Math.pow(10,-9)/u9(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,-1)*1*Math.pow(10,-9)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.0774274878383165; Expression=24*Math.pow(10,-2)*1*Math.pow(10,-9)/u1(k)+u7(k)-u5(k)-u4(k); Java Expression: 24*Math.pow(10,-2)*1*Math.pow(10,-9)/getVariable(1,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427487837859; Expression=39*Math.pow(10,-6)*1*Math.pow(10,-9)/u9(k)+u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,-6)*1*Math.pow(10,-9)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.047316435456409; Expression=83*Math.pow(10,+3)*24*Math.pow(10,-5)/u9(k)+u7(k)-u5(k)-u3(k); Java Expression: 83*Math.pow(10,+3)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.028186165696358; Expression=83*Math.pow(10,+3)*24*Math.pow(10,-5)/u5(k)+u7(k)-u5(k)-u3(k); Java Expression: 83*Math.pow(10,+3)*24*Math.pow(10,-5)/getVariable(5,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.014970663700496; Expression=39*Math.pow(10,+1)*96*Math.pow(10,-3)/u4(k)+u7(k)-u5(k)-u3(k); Java Expression: 39*Math.pow(10,+1)*96*Math.pow(10,-3)/getVariable(4,k)+getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:14:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.99238894956489; Expression=u6(k)/u9(k)/93*Math.pow(10,-6)+u8(k)-u5(k)-u3(k)+u7(k); Java Expression: getVariable(6,k)/getVariable(9,k)/93*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)+getVariable(7,k)
Aug 31, 2024 1:14:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.992388946786919; Expression=u6(k)/u9(k)/1*Math.pow(10,-9)+u8(k)-u5(k)-u3(k)+u7(k); Java Expression: getVariable(6,k)/getVariable(9,k)/1*Math.pow(10,-9)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)+getVariable(7,k)
Aug 31, 2024 1:14:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.992388946509773; Expression=u6(k)/u9(k)/37*Math.pow(10,-9)+u8(k)-u5(k)-u3(k)+u7(k); Java Expression: getVariable(6,k)/getVariable(9,k)/37*Math.pow(10,-9)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)+getVariable(7,k)
Aug 31, 2024 1:14:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.97556466822498; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-39*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-39*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.974997587923284; Expression=68*Math.pow(10,-8)*24*Math.pow(10,-5)/u9(k)+u7(k)-39*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 68*Math.pow(10,-8)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-39*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.970949548285973; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-41*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-41*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.970397562839324; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u9(k)+u7(k)-41*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(9,k)+getVariable(7,k)-41*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.96191175473797; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-45*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-45*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.938554054489152; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u9(k)+u7(k)-u9(k)/u9(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-getVariable(9,k)/getVariable(9,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.938371046287601; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-5)/u3(k)+u7(k)-u9(k)/u9(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-5)/getVariable(3,k)+getVariable(7,k)-getVariable(9,k)/getVariable(9,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.869297484711036; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u9(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(9,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.869293784757627; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u7(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(7,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.869293418824458; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.859467203209906; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u9(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u2(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(9,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(2,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.853444718583206; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-96*Math.pow(10,-6)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.848229311138322; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u7(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(7,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.848229042014171; Expression=39*Math.pow(10,-1)*3*Math.pow(10,-6)/u7(k)+u7(k)-96*Math.pow(10,-6)*u6(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,-1)*3*Math.pow(10,-6)/getVariable(7,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(6,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8372477574467965; Expression=39*Math.pow(10,+1)*1*Math.pow(10,-6)/u7(k)+u7(k)-96*Math.pow(10,-6)*u2(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*1*Math.pow(10,-6)/getVariable(7,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(2,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8372445038113385; Expression=39*Math.pow(10,+2)*1*Math.pow(10,-6)/u7(k)+u7(k)-96*Math.pow(10,-6)*u2(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+2)*1*Math.pow(10,-6)/getVariable(7,k)+getVariable(7,k)-96*Math.pow(10,-6)*getVariable(2,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.73037837428777; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:52 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.730378253912966; Expression=39*Math.pow(10,+1)*24*Math.pow(10,-8)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*24*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.730376671954042; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-6)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-6)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.730361207048857; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-5)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-5)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.728779518105392; Expression=39*Math.pow(10,+4)*3*Math.pow(10,-6)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u6(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+4)*3*Math.pow(10,-6)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(6,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.700920698946539; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.695966494616775; Expression=39*Math.pow(10,+1)*6*Math.pow(10,-3)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u7(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*6*Math.pow(10,-3)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:14:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.667253569945934; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:00 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.66725356893229; Expression=83*Math.pow(10,+1)*3*Math.pow(10,-8)/u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 83*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6672535637727; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)/u6(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)/getVariable(6,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.667211082412573; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.667149053716011; Expression=96*Math.pow(10,+1)*3*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 96*Math.pow(10,+1)*3*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.665899433182358; Expression=39*Math.pow(10,+1)*97*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.651915899875174; Expression=55*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 55*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.64722727528538; Expression=83*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 83*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6456749146183585; Expression=97*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-24*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 97*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-24*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.628773534984324; Expression=55*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-28*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 55*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-28*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6231066452655085; Expression=55*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-33*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 55*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-33*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.619009557206159; Expression=83*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-28*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 83*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-28*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.608686807784161; Expression=83*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-31*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 83*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-31*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6026865961749595; Expression=97*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-31*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 97*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-31*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.600231086665922; Expression=96*Math.pow(10,+2)*97*Math.pow(10,-8)*u9(k)+u7(k)-33*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 96*Math.pow(10,+2)*97*Math.pow(10,-8)*getVariable(9,k)+getVariable(7,k)-33*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.598748511337376; Expression=96*Math.pow(10,+2)*1*Math.pow(10,-6)*u9(k)+u7(k)-33*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 96*Math.pow(10,+2)*1*Math.pow(10,-6)*getVariable(9,k)+getVariable(7,k)-33*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.598239247449904; Expression=97*Math.pow(10,+2)*1*Math.pow(10,-6)*u9(k)+u7(k)-33*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 97*Math.pow(10,+2)*1*Math.pow(10,-6)*getVariable(9,k)+getVariable(7,k)-33*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.5592995560970175; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-1)/u6(k)+u7(k)-43*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(6,k)+getVariable(7,k)-43*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:39 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.5592995560970175 -->> Avg.: 663254.3933148889 -->> Std. Dev.: 2836127.530265118
Aug 31, 2024 1:15:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.515796041373105; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-1)/u1(k)+u7(k)-43*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(1,k)+getVariable(7,k)-43*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:15:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.513313766228954; Expression=39*Math.pow(10,+1)*3*Math.pow(10,-1)/u1(k)+u7(k)-45*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 39*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(1,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:16:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.511927474725357; Expression=43*Math.pow(10,+1)*3*Math.pow(10,-1)/u1(k)+u7(k)-45*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 43*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(1,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:16:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.498446816737397; Expression=59*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-45*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 59*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:16:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.498243344822187; Expression=62*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-45*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 62*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:17:26 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.498243344822187 -->> Avg.: 1069.586965937205 -->> Std. Dev.: 2925.541886037917
Aug 31, 2024 1:17:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.498222899050259; Expression=60*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-45*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:17:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.497872679641022; Expression=62*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 62*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:00 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.493080913184059; Expression=64*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.488910445126233; Expression=66*Math.pow(10,+1)*3*Math.pow(10,-1)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 66*Math.pow(10,+1)*3*Math.pow(10,-1)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.478839983749203; Expression=64*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.477390271935727; Expression=62*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 62*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.476999581876186; Expression=60*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.476649223014722; Expression=60*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.474943638105014; Expression=64*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u1(k)*u1(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:18:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.474366762064743; Expression=64*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u1(k)*u1(k)-38*Math.pow(10,-5)*u2(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-38*Math.pow(10,-5)*getVariable(2,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:00 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.474341109667103; Expression=64*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u1(k)*u1(k)-53*Math.pow(10,-5)*u2(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-53*Math.pow(10,-5)*getVariable(2,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.474340556775743; Expression=64*Math.pow(10,+1)*39*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u1(k)*u1(k)-45*Math.pow(10,-5)*u2(k)-u5(k)-u4(k); Java Expression: 64*Math.pow(10,+1)*39*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(1,k)*getVariable(1,k)-45*Math.pow(10,-5)*getVariable(2,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.432249666276516; Expression=60*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u7(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.431367409997834; Expression=55*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u7(k)*u1(k)-u5(k)-u4(k); Java Expression: 55*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.426516128318231; Expression=60*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-58*Math.pow(10,-5)*u7(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-58*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.425340039477302; Expression=60*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-u5(k)-u4(k); Java Expression: 60*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:19:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.4084006664415805; Expression=60*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-93*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-93*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:22 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 5.4084006664415805 -->> Avg.: 35.09836226017947 -->> Std. Dev.: 51.407651665569496
Aug 31, 2024 1:19:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3763581027166865; Expression=60*Math.pow(10,+1)*58*Math.pow(10,-2)/u7(k)+u7(k)-45*Math.pow(10,-5)*u7(k)*u1(k)-93*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*58*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-45*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-93*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.354259341322438; Expression=60*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-93*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-93*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.354255170417711; Expression=60*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-55*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-55*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.354253414327024; Expression=60*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-39*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-39*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3542494632956625; Expression=60*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.341229784849434; Expression=60*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-39*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-39*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.340453228147286; Expression=62*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-55*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 62*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-55*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.340448715356873; Expression=62*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 62*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.33656503647888; Expression=60*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-53*Math.pow(10,-5)*u7(k)*u1(k)-39*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 60*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-53*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-39*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.329547920659484; Expression=64*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-55*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-55*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.329544610189984; Expression=64*Math.pow(10,+1)*64*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*64*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.321557055944811; Expression=64*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-55*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-55*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.321554953878271; Expression=64*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)-3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)-3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:19:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.321554711364778; Expression=64*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.32155362013762; Expression=64*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-5)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-5)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.317884067013202; Expression=64*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-1)+u8(k)-u5(k)-u3(k); Java Expression: 64*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.316381875210634; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.316381024174845; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+55*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+55*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.316380876931797; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+64*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+64*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3163808442131995; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-6)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-6)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.316372948427116; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+55*Math.pow(10,-5)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+55*Math.pow(10,-5)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3159754070244265; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-55*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-55*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.314111559348505; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-57*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-57*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.30938111094343; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-57*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-1)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-57*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:20:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3051093750987475; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-59*Math.pow(10,-5)*u7(k)*u1(k)+3*Math.pow(10,-1)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-59*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.303682645486813; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-59*Math.pow(10,-5)*u7(k)*u1(k)+39*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-59*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+39*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.302456532588663; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-60*Math.pow(10,-5)*u7(k)*u1(k)+39*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-60*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+39*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:15 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 5.302456532588663 -->> Avg.: 11.690548499740506 -->> Std. Dev.: 12.318119873264877
Aug 31, 2024 1:21:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.301680194528734; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-60*Math.pow(10,-5)*u7(k)*u1(k)+60*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-60*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+60*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3013859666274055; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-60*Math.pow(10,-5)*u7(k)*u1(k)+45*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-60*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+45*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.301110542055331; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-60*Math.pow(10,-5)*u7(k)*u1(k)+55*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-60*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+55*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3002831574763976; Expression=66*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-60*Math.pow(10,-5)*u7(k)*u1(k)+45*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-60*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+45*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.297177718143677; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-62*Math.pow(10,-5)*u7(k)*u1(k)+60*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-62*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+60*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.296547612301784; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-62*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-62*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:47 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.296413575161342; Expression=66*Math.pow(10,+1)*66*Math.pow(10,-2)/u7(k)+u7(k)-64*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*66*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-64*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.292444949705609; Expression=66*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-64*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-64*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.292223506123099; Expression=66*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-64*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-64*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:21:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.291638150380923; Expression=68*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-64*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-64*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.29126014109883; Expression=68*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-64*Math.pow(10,-5)*u7(k)*u1(k)+60*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-64*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+60*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.289749517806828; Expression=68*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.289380154668985; Expression=68*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.288548297436995; Expression=68*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.288428334222551; Expression=68*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.288396715654933; Expression=68*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.288314717082699; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.288181530385807; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-66*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-66*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.28796948126373; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.287741015769072; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:22:57 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 5.287741015769072 -->> Avg.: 5.7503692003832185 -->> Std. Dev.: 1.479122669740025
Aug 31, 2024 1:23:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.286533647014423; Expression=70*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.286186206590322; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.286163303279441; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.28615965487327; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2861275122604985; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.286011212171071; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+70*Math.pow(10,-2)+u8(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+70*Math.pow(10,-2)+getVariable(8,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:24:43 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 5.286011212171071 -->> Avg.: 5.381585988402932 -->> Std. Dev.: 0.10051119615793877
Aug 31, 2024 1:25:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.285553567623941; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2826180188330465; Expression=69*Math.pow(10,+1)*68*Math.pow(10,-2)/u7(k)+u7(k)-68*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*68*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-68*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.280532981921083; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.277421347794668; Expression=66*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.277090742847262; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.277044478193614; Expression=66*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u3(k)-u5(k)-u3(k); Java Expression: 66*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(3,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.271332463404974; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.266100053907353; Expression=69*Math.pow(10,+1)*69*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*69*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.266094579476246; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+66*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+66*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.264057965640841; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-69*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-69*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2627904869683295; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+68*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+68*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.261525487608511; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.260841650351788; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.260472241458849; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+70*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+70*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:25:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.260470218883025; Expression=68*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:00 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.259800685500106; Expression=68*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+70*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 68*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+70*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.258584166734281; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-70*Math.pow(10,-5)*u7(k)*u1(k)+73*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-70*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+73*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.255329625879632; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+69*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+69*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.253841293995251; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+70*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+70*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.250648620529487; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+73*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+73*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:26:30 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 5.250648620529487 -->> Avg.: 5.333208558059141 -->> Std. Dev.: 0.08050386396146812
Aug 31, 2024 1:27:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.249574768183175; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:27:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.248459793839719; Expression=70*Math.pow(10,+1)*70*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*70*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:28:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.248278692471558; Expression=69*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-73*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-73*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:28:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.247267787123216; Expression=69*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-77*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 69*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-77*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:28:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.244130762572038; Expression=70*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-77*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 70*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-77*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:28:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.240529934701842; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-77*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-77*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:28:17 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 5.240529934701842 -->> Avg.: 5.287162957351483 -->> Std. Dev.: 0.033521041408789955
Aug 31, 2024 1:28:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.239823365644227; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-78*Math.pow(10,-5)*u7(k)*u1(k)+78*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-78*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+78*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2387328771909365; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-78*Math.pow(10,-5)*u7(k)*u1(k)+79*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-78*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+79*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.236738290295319; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-78*Math.pow(10,-5)*u7(k)*u1(k)+82*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-78*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+82*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.236660450889472; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-78*Math.pow(10,-5)*u7(k)*u1(k)+85*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-78*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+85*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.233579643870777; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-79*Math.pow(10,-5)*u7(k)*u1(k)+85*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-79*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+85*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.232204176525999; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-81*Math.pow(10,-5)*u7(k)*u1(k)+85*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-81*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+85*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:29:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.228275590195502; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-81*Math.pow(10,-5)*u7(k)*u1(k)+89*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-81*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+89*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:30:05 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 5.228275590195502 -->> Avg.: 5.268231484492448 -->> Std. Dev.: 0.02260512176758935
Aug 31, 2024 1:30:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2277126731403065; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-82*Math.pow(10,-5)*u7(k)*u1(k)+89*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-82*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+89*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:31:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2271449430949986; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-82*Math.pow(10,-5)*u7(k)*u1(k)+99*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-82*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+99*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:31:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.225891760316978; Expression=73*Math.pow(10,+1)*73*Math.pow(10,-2)/u7(k)+u7(k)-82*Math.pow(10,-5)*u7(k)*u1(k)+91*Math.pow(10,-3)*u5(k)-u5(k)-u3(k); Java Expression: 73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-82*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+91*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:31:52 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 5.225891760316978 -->> Avg.: 5.255129481555294 -->> Std. Dev.: 0.022674456172399535

Execution time: 1072.528 seconds.



@@;73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-82*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+91*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k)



Run #1
========
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=9.499999674557226E9; Expression=u9(k)/u3(k)+95*Math.pow(10,+8)-u7(k)*u8(k)-u6(k)-u4(k); Java Expression: getVariable(9,k)/getVariable(3,k)+95*Math.pow(10,+8)-getVariable(7,k)*getVariable(8,k)-getVariable(6,k)-getVariable(4,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=1.697621945321437E8; Expression=58*Math.pow(10,+4)+u4(k)-u4(k)+u5(k)/72*Math.pow(10,-4)-u5(k)+87*Math.pow(10,-9)+u6(k)*u8(k)-51*Math.pow(10,+5)*u5(k); Java Expression: 58*Math.pow(10,+4)+getVariable(4,k)-getVariable(4,k)+getVariable(5,k)/72*Math.pow(10,-4)-getVariable(5,k)+87*Math.pow(10,-9)+getVariable(6,k)*getVariable(8,k)-51*Math.pow(10,+5)*getVariable(5,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=292.70011503622806; Expression=u1(k)-u5(k)/39*Math.pow(10,+1)*u3(k); Java Expression: getVariable(1,k)-getVariable(5,k)/39*Math.pow(10,+1)*getVariable(3,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=141.6308699014911; Expression=u2(k)-u8(k)+48*Math.pow(10,-1)+u1(k)+41*Math.pow(10,-1)-u1(k); Java Expression: getVariable(2,k)-getVariable(8,k)+48*Math.pow(10,-1)+getVariable(1,k)+41*Math.pow(10,-1)-getVariable(1,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=26.100044281720617; Expression=91*Math.pow(10,+1)/u7(k)-u8(k)*u8(k)/u2(k); Java Expression: 91*Math.pow(10,+1)/getVariable(7,k)-getVariable(8,k)*getVariable(8,k)/getVariable(2,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=14.777318305982895; Expression=u9(k)/u8(k)*u8(k); Java Expression: getVariable(9,k)/getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.33042058163014; Expression=22*Math.pow(10,-4)+u5(k); Java Expression: 22*Math.pow(10,-4)+getVariable(5,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.318100752463806; Expression=5*Math.pow(10,-8)/69*Math.pow(10,-6)*u6(k)*u8(k)/11*Math.pow(10,-3)+u5(k)+4*Math.pow(10,+5)/82*Math.pow(10,-2)/u2(k); Java Expression: 5*Math.pow(10,-8)/69*Math.pow(10,-6)*getVariable(6,k)*getVariable(8,k)/11*Math.pow(10,-3)+getVariable(5,k)+4*Math.pow(10,+5)/82*Math.pow(10,-2)/getVariable(2,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.071379089506069; Expression=27*Math.pow(10,-3)/u8(k)+35*Math.pow(10,-8)+u5(k)+u4(k)/u3(k)/84*Math.pow(10,-8)*u7(k)+u8(k)+u8(k); Java Expression: 27*Math.pow(10,-3)/getVariable(8,k)+35*Math.pow(10,-8)+getVariable(5,k)+getVariable(4,k)/getVariable(3,k)/84*Math.pow(10,-8)*getVariable(7,k)+getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:31:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 1:31:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.696616858954419; Expression=u7(k)-u5(k)+u2(k)/u5(k)-89*Math.pow(10,-1)-u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)+getVariable(2,k)/getVariable(5,k)-89*Math.pow(10,-1)-getVariable(3,k)
Aug 31, 2024 1:31:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.131407434512215; Expression=u7(k)-u5(k)-u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)
Aug 31, 2024 1:32:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427487837859; Expression=u7(k)-u5(k)-u4(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(4,k)
Aug 31, 2024 1:32:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.070528677231689; Expression=u7(k)-u5(k)-u3(k)+u1(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+getVariable(1,k)/getVariable(6,k)
Aug 31, 2024 1:32:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.027105354929287; Expression=u7(k)-u5(k)-u3(k)+u6(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+getVariable(6,k)/getVariable(6,k)
Aug 31, 2024 1:32:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.003691666814872; Expression=u7(k)-u5(k)-u3(k)+u2(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+getVariable(2,k)/getVariable(6,k)
Aug 31, 2024 1:32:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.973215683027094; Expression=u7(k)-u5(k)-u3(k)+u6(k)/u1(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+getVariable(6,k)/getVariable(1,k)
Aug 31, 2024 1:32:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.971626426077117; Expression=u7(k)-u5(k)-u3(k)+u2(k)/u1(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 1:32:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.97046005051846; Expression=u7(k)-u5(k)-u8(k)+u2(k)/u1(k)-u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(8,k)+getVariable(2,k)/getVariable(1,k)-getVariable(3,k)
Aug 31, 2024 1:32:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.970460050518458; Expression=u7(k)-u5(k)-u8(k)-u3(k)+u2(k)/u1(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(8,k)-getVariable(3,k)+getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 1:32:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.966854021237891; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u6(k)/u5(k)-u2(k)/u7(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(6,k)/getVariable(5,k)-getVariable(2,k)/getVariable(7,k)
Aug 31, 2024 1:32:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.908373363718969; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u6(k)/u5(k)-u2(k)/u2(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(6,k)/getVariable(5,k)-getVariable(2,k)/getVariable(2,k)
Aug 31, 2024 1:32:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.904803559934552; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u6(k)/u5(k)-u1(k)/u7(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(6,k)/getVariable(5,k)-getVariable(1,k)/getVariable(7,k)
Aug 31, 2024 1:32:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8859201563703545; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u7(k)/u5(k)-u2(k)/u2(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(7,k)/getVariable(5,k)-getVariable(2,k)/getVariable(2,k)
Aug 31, 2024 1:32:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.875180756278966; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u1(k)/u5(k)-u2(k)/u2(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(1,k)/getVariable(5,k)-getVariable(2,k)/getVariable(2,k)
Aug 31, 2024 1:32:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.861092003484335; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u1(k)/u5(k)-u2(k)/u7(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(1,k)/getVariable(5,k)-getVariable(2,k)/getVariable(7,k)
Aug 31, 2024 1:32:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.836969604122814; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u1(k)/u5(k)-u2(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(1,k)/getVariable(5,k)-getVariable(2,k)/getVariable(6,k)
Aug 31, 2024 1:32:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.7835355890499205; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u6(k)/u5(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(6,k)/getVariable(5,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:00 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.7835355890499205 -->> Avg.: 754879.4617276043 -->> Std. Dev.: 4103103.2535493774
Aug 31, 2024 1:33:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.766096473119513; Expression=u7(k)-u5(k)-u3(k)+11*Math.pow(10,+3)/u6(k)/u5(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+11*Math.pow(10,+3)/getVariable(6,k)/getVariable(5,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.667189302489986; Expression=u7(k)-u5(k)-u3(k)+11*Math.pow(10,+3)/u7(k)/u5(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+11*Math.pow(10,+3)/getVariable(7,k)/getVariable(5,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.665520088354624; Expression=u7(k)-u5(k)-u3(k)+11*Math.pow(10,+3)/u7(k)/u4(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+11*Math.pow(10,+3)/getVariable(7,k)/getVariable(4,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.665292620844642; Expression=u7(k)-u5(k)-u3(k)+7*Math.pow(10,+3)/u1(k)/u4(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+7*Math.pow(10,+3)/getVariable(1,k)/getVariable(4,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6566086324917855; Expression=u7(k)-u5(k)-u3(k)+11*Math.pow(10,+3)/u1(k)/u4(k)-u1(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+11*Math.pow(10,+3)/getVariable(1,k)/getVariable(4,k)-getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 1:33:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.585525560245014; Expression=u7(k)-u5(k)-u3(k)+11*Math.pow(10,+3)/u1(k)/u4(k)-u7(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+11*Math.pow(10,+3)/getVariable(1,k)/getVariable(4,k)-getVariable(7,k)/getVariable(3,k)
Aug 31, 2024 1:34:17 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 731.964189486461 -->> Std. Dev.: 2059.3525646262174
Aug 31, 2024 1:35:45 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 28.639703450824523 -->> Std. Dev.: 37.80450453143085
Aug 31, 2024 1:37:16 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 11.212854540258132 -->> Std. Dev.: 10.880433926396075
Aug 31, 2024 1:38:45 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 5.8948110267929765 -->> Std. Dev.: 1.3511332611748452
Aug 31, 2024 1:40:11 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 5.597172963009729 -->> Std. Dev.: 0.042062980990430605
Aug 31, 2024 1:41:37 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 5.585525560245014 -->> Std. Dev.: 0.0
Aug 31, 2024 1:43:05 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 5.585525560245014 -->> Std. Dev.: 0.0
Aug 31, 2024 1:44:37 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 5.585525560245014 -->> Avg.: 5.585525560245014 -->> Std. Dev.: 0.0
Aug 31, 2024 1:45:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.567854557902222; Expression=u7(k)-u5(k)-u3(k)+33*Math.pow(10,+3)/u1(k)/u7(k)-u7(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+33*Math.pow(10,+3)/getVariable(1,k)/getVariable(7,k)-getVariable(7,k)/getVariable(3,k)
Aug 31, 2024 1:45:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.551381810572879; Expression=u7(k)-u5(k)-u3(k)+30*Math.pow(10,+3)/u1(k)/u7(k)-u7(k)/u3(k); Java Expression: getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+30*Math.pow(10,+3)/getVariable(1,k)/getVariable(7,k)-getVariable(7,k)/getVariable(3,k)
Aug 31, 2024 1:46:09 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 5.551381810572879 -->> Avg.: 5.583348575292225 -->> Std. Dev.: 0.007540202171742505

Execution time: 856.004 seconds.



@@;getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+30*Math.pow(10,+3)/getVariable(1,k)/getVariable(7,k)-getVariable(7,k)/getVariable(3,k)



Run #2
========
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=36147.449410876565; Expression=39*Math.pow(10,-5)*95*Math.pow(10,+8)/u7(k)-u8(k)-u7(k)/u2(k)+u3(k)-u9(k); Java Expression: 39*Math.pow(10,-5)*95*Math.pow(10,+8)/getVariable(7,k)-getVariable(8,k)-getVariable(7,k)/getVariable(2,k)+getVariable(3,k)-getVariable(9,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=244.3618951725783; Expression=u2(k)*u5(k)/u1(k)+u3(k)+u2(k); Java Expression: getVariable(2,k)*getVariable(5,k)/getVariable(1,k)+getVariable(3,k)+getVariable(2,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=61.12434857365429; Expression=u5(k)+u8(k)+u6(k)-u8(k)-u9(k); Java Expression: getVariable(5,k)+getVariable(8,k)+getVariable(6,k)-getVariable(8,k)-getVariable(9,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=33.095659744462964; Expression=u6(k)/u1(k); Java Expression: getVariable(6,k)/getVariable(1,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=14.519624668712725; Expression=u9(k)-u8(k); Java Expression: getVariable(9,k)-getVariable(8,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=11.457172662181117; Expression=1*Math.pow(10,-1)+u3(k)-u7(k)/u7(k)-u1(k)/u1(k); Java Expression: 1*Math.pow(10,-1)+getVariable(3,k)-getVariable(7,k)/getVariable(7,k)-getVariable(1,k)/getVariable(1,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.348164712130053; Expression=u5(k)+u6(k)*u3(k)*u1(k)*87*Math.pow(10,-8)+u6(k)/u9(k)*u8(k)/u7(k); Java Expression: getVariable(5,k)+getVariable(6,k)*getVariable(3,k)*getVariable(1,k)*87*Math.pow(10,-8)+getVariable(6,k)/getVariable(9,k)*getVariable(8,k)/getVariable(7,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037871009152026; Expression=98*Math.pow(10,-9)*u6(k)*u2(k)+u8(k)+u5(k); Java Expression: 98*Math.pow(10,-9)*getVariable(6,k)*getVariable(2,k)+getVariable(8,k)+getVariable(5,k)
Aug 31, 2024 1:46:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.022922113736723; Expression=u5(k)+u4(k)*u8(k)/u5(k); Java Expression: getVariable(5,k)+getVariable(4,k)*getVariable(8,k)/getVariable(5,k)
Aug 31, 2024 1:46:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.925862772361655; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u4(k)*14*Math.pow(10,+2)+u9(k)/u1(k)*u8(k)+u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(4,k)*14*Math.pow(10,+2)+getVariable(9,k)/getVariable(1,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:46:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.9165415542103155; Expression=u5(k)+u4(k)*u8(k)/u5(k)*u8(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(4,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:46:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.899745778312764; Expression=u5(k)+u9(k)*u8(k)/u5(k); Java Expression: getVariable(5,k)+getVariable(9,k)*getVariable(8,k)/getVariable(5,k)
Aug 31, 2024 1:46:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.6920824337390945; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u4(k)*14*Math.pow(10,+2)+u9(k)/u1(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(4,k)*14*Math.pow(10,+2)+getVariable(9,k)/getVariable(1,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.646467816212749; Expression=u5(k)+u4(k)*u8(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(4,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.34814180888654; Expression=u5(k)-u6(k)/24*Math.pow(10,-3)/u4(k)*14*Math.pow(10,+2)+u6(k)/u1(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(6,k)/24*Math.pow(10,-3)/getVariable(4,k)*14*Math.pow(10,+2)+getVariable(6,k)/getVariable(1,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.317374831295117; Expression=u5(k)+u4(k)*u8(k)/u1(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(4,k)*getVariable(8,k)/getVariable(1,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.2968961445670715; Expression=u5(k)+u4(k)*u8(k)/u3(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(4,k)*getVariable(8,k)/getVariable(3,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.290883629250107; Expression=u5(k)+u5(k)*u8(k)/u3(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(5,k)*getVariable(8,k)/getVariable(3,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.223678092892542; Expression=u5(k)+u9(k)*u8(k)/u1(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(9,k)*getVariable(8,k)/getVariable(1,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.197260547482695; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*14*Math.pow(10,+2)+u9(k)/u1(k)*u8(k)+u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*14*Math.pow(10,+2)+getVariable(9,k)/getVariable(1,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:46:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.05010929324253; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*14*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)+u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*14*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:46:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.52657864592419; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*14*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*14*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.304116394331608; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)+u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 1:46:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.030956498026739; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.965363553822296; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*30*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*30*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.924139057697253; Expression=u5(k)-u4(k)/33*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/33*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.885272503026268; Expression=u5(k)-u3(k)/33*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u9(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(3,k)/33*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(9,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.967163474773143; Expression=u5(k)-u4(k)/24*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/24*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.609396941996568; Expression=u5(k)-u4(k)/20*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/20*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.564406489804529; Expression=u5(k)-u4(k)/20*Math.pow(10,-3)/u8(k)*57*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/20*Math.pow(10,-3)/getVariable(8,k)*57*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.519825875082521; Expression=u5(k)-u4(k)/17*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/17*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.519349767386473; Expression=u5(k)-u3(k)/20*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(3,k)/20*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.51604711210841; Expression=u5(k)-u4(k)/18*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(4,k)/18*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.512080810000115; Expression=u5(k)-u3(k)/18*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(5,k)-getVariable(3,k)/18*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:46:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.4021993348886115; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u6(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(6,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.387828877023559; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u7(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(7,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.265406798393865; Expression=u8(k)*u6(k)/18*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u7(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/18*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(7,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.252692289005197; Expression=u8(k)*u6(k)/18*Math.pow(10,-3)/u8(k)*47*Math.pow(10,+2)+u7(k)/u5(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/18*Math.pow(10,-3)/getVariable(8,k)*47*Math.pow(10,+2)+getVariable(7,k)/getVariable(5,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.145067454293832; Expression=u8(k)*u6(k)/18*Math.pow(10,-3)/u8(k)*47*Math.pow(10,+2)+u7(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/18*Math.pow(10,-3)/getVariable(8,k)*47*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:23 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 4.145067454293832 -->> Avg.: 361627.86152875767 -->> Std. Dev.: 1613531.8668698322
Aug 31, 2024 1:47:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.114845065848182; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*46*Math.pow(10,+2)+u7(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*46*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:47:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.109277768764333; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*45*Math.pow(10,+2)+u7(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*45*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:48:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.104876823798755; Expression=u8(k)*u6(k)/64*Math.pow(10,+3)/u8(k)*17*Math.pow(10,-3)+u7(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/64*Math.pow(10,+3)/getVariable(8,k)*17*Math.pow(10,-3)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:48:26 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 4.104876823798755 -->> Avg.: 483.29376210662963 -->> Std. Dev.: 1298.3015938316353
Aug 31, 2024 1:49:34 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 4.104876823798755 -->> Avg.: 31.00916207928842 -->> Std. Dev.: 44.34604022157072
Aug 31, 2024 1:50:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.062905405838698; Expression=u8(k)*u6(k)/64*Math.pow(10,+3)/u8(k)*17*Math.pow(10,-3)+u7(k)/u4(k)*u3(k)/u1(k)*u1(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/64*Math.pow(10,+3)/getVariable(8,k)*17*Math.pow(10,-3)+getVariable(7,k)/getVariable(4,k)*getVariable(3,k)/getVariable(1,k)*getVariable(1,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:50:44 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 4.062905405838698 -->> Avg.: 10.38972086353681 -->> Std. Dev.: 11.934514910580958
Aug 31, 2024 1:51:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.058058400755929; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*45*Math.pow(10,+2)+u7(k)/u4(k)*u3(k)/u1(k)*u1(k)/u4(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*45*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(3,k)/getVariable(1,k)*getVariable(1,k)/getVariable(4,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:52:01 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 4.058058400755929 -->> Avg.: 4.593013603136388 -->> Std. Dev.: 1.6762357933163419
Aug 31, 2024 1:53:23 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 4.058058400755929 -->> Avg.: 4.0897824600759245 -->> Std. Dev.: 0.031449442865557335
Aug 31, 2024 1:54:48 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 4.058058400755929 -->> Avg.: 4.0771828019382115 -->> Std. Dev.: 0.0227807938712468
Aug 31, 2024 1:56:12 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 4.058058400755929 -->> Avg.: 4.068008494102934 -->> Std. Dev.: 0.018827500073482467
Aug 31, 2024 1:57:36 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 4.058058400755929 -->> Avg.: 4.058864270852382 -->> Std. Dev.: 0.004938545162827307
Aug 31, 2024 1:57:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.9923855657160137; Expression=u8(k)*u6(k)/17*Math.pow(10,-3)/u8(k)*45*Math.pow(10,+2)+u7(k)/u4(k)*u5(k)/u7(k)*u8(k)*u8(k)*u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*45*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(5,k)/getVariable(7,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:59:00 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 3.9923855657160137 -->> Avg.: 4.0461295459537565 -->> Std. Dev.: 0.025332406656447128

Execution time: 772.449 seconds.



@@;getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*45*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(5,k)/getVariable(7,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k)



Run #3
========
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10345.75864671114; Expression=33*Math.pow(10,+6)/u5(k)/u7(k)-u9(k); Java Expression: 33*Math.pow(10,+6)/getVariable(5,k)/getVariable(7,k)-getVariable(9,k)
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=36.8039860925374; Expression=u3(k)-u9(k); Java Expression: getVariable(3,k)-getVariable(9,k)
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=31.844858731748793; Expression=u6(k)/u3(k); Java Expression: getVariable(6,k)/getVariable(3,k)
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=12.30889150825429; Expression=96*Math.pow(10,-5)+u3(k); Java Expression: 96*Math.pow(10,-5)+getVariable(3,k)
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.734990642312734; Expression=88*Math.pow(10,-5)+u5(k)-u2(k)/u1(k); Java Expression: 88*Math.pow(10,-5)+getVariable(5,k)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 1:59:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.5798783894621; Expression=u5(k)+u7(k)/u4(k); Java Expression: getVariable(5,k)+getVariable(7,k)/getVariable(4,k)
Aug 31, 2024 1:59:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.513807433340293; Expression=u5(k)+u1(k)-u5(k)/u1(k)-u1(k)-u7(k)*93*Math.pow(10,-5)+u1(k)/u4(k); Java Expression: getVariable(5,k)+getVariable(1,k)-getVariable(5,k)/getVariable(1,k)-getVariable(1,k)-getVariable(7,k)*93*Math.pow(10,-5)+getVariable(1,k)/getVariable(4,k)
Aug 31, 2024 1:59:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.329736312920165; Expression=47*Math.pow(10,-3)*74*Math.pow(10,-2)+u5(k); Java Expression: 47*Math.pow(10,-3)*74*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 1:59:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.328576915915999; Expression=27*Math.pow(10,-2)+u5(k); Java Expression: 27*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 1:59:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 1:59:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.545490207838515; Expression=u5(k)+u8(k)*u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 1:59:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.522279586009189; Expression=u5(k)+u8(k)/u5(k)*u5(k)-u7(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(5,k)-getVariable(7,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.442021832405312; Expression=u5(k)+u8(k)/u5(k)*u4(k)-u7(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(4,k)-getVariable(7,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.853566589994621; Expression=u5(k)+u8(k)/u5(k)*u7(k)-u7(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-getVariable(7,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.852395336951669; Expression=u5(k)+u8(k)/u4(k)*u7(k)-u7(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(4,k)*getVariable(7,k)-getVariable(7,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.208645905568378; Expression=u5(k)+u8(k)/u4(k)*u7(k)-u2(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(4,k)*getVariable(7,k)-getVariable(2,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.053387879413732; Expression=u5(k)+u8(k)/u5(k)*u7(k)-u2(k)/u5(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-getVariable(2,k)/getVariable(5,k)/getVariable(8,k)
Aug 31, 2024 1:59:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.940155692077132; Expression=u5(k)+u8(k)/u5(k)*u7(k)-u2(k)/u9(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-getVariable(2,k)/getVariable(9,k)/getVariable(8,k)
Aug 31, 2024 1:59:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.870221996769453; Expression=u5(k)+u8(k)/u5(k)*u7(k)-81*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-81*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.84358984502422; Expression=u5(k)+u8(k)/u5(k)*u7(k)-77*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-77*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.839732654160218; Expression=u5(k)+u8(k)/u5(k)*u7(k)-76*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-76*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.285683963466124; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u7(k)-81*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-81*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.223733743026926; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u7(k)-73*Math.pow(10,-3)*u7(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(7,k)-73*Math.pow(10,-3)*getVariable(7,k)
Aug 31, 2024 1:59:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.98646650380844; Expression=u5(k)+u8(k)*u8(k)/u4(k)*u7(k)-81*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(4,k)*getVariable(7,k)-81*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.883591628907355; Expression=u5(k)+u8(k)*u8(k)/u4(k)*u7(k)-92*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(4,k)*getVariable(7,k)-92*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.880532164610307; Expression=u5(k)+u8(k)*u8(k)/u4(k)*u6(k)-92*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(4,k)*getVariable(6,k)-92*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 1:59:54 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.8646518351222285; Expression=u5(k)+u8(k)*u8(k)/u4(k)*u6(k)-86*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(4,k)*getVariable(6,k)-86*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:00 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.864539149443086; Expression=u5(k)+u8(k)*u8(k)/u4(k)*u6(k)-88*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(4,k)*getVariable(6,k)-88*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.7854889580287505; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-86*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-86*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.745439300136479; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-92*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-92*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.744063702862814; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-95*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-95*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:16 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 4.744063702862814 -->> Avg.: 1911396.8633975694 -->> Std. Dev.: 8711665.53113058
Aug 31, 2024 2:00:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.743134109648775; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-94*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-94*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.5101336805778525; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-99*Math.pow(10,+1)/u7(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-99*Math.pow(10,+1)/getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:00:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.424316385456602; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-99*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-99*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:00:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.404934613618219; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-92*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-92*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:00:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.402592507031506; Expression=u5(k)+u8(k)*u8(k)/u5(k)*u6(k)-94*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)*getVariable(8,k)/getVariable(5,k)*getVariable(6,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:01:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.402592507031505; Expression=u5(k)+u6(k)*u8(k)/u5(k)*u8(k)-94*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(6,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:01:34 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 4.402592507031505 -->> Avg.: 1303.3593218056803 -->> Std. Dev.: 3882.541240700088
Aug 31, 2024 2:02:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.401716790978; Expression=u5(k)+u8(k)/u1(k)+u6(k)*u8(k)/u5(k)*u8(k)-94*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(1,k)+getVariable(6,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:02:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.401233345663916; Expression=u5(k)+u8(k)/u5(k)+u6(k)*u8(k)/u5(k)*u8(k)-94*Math.pow(10,+1)/u6(k)/u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(5,k)+getVariable(6,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:02:51 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 36.50842482228509 -->> Std. Dev.: 58.341124792977105
Aug 31, 2024 2:04:01 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 10.630340723272608 -->> Std. Dev.: 11.971345606619353
Aug 31, 2024 2:05:13 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.878528028972889 -->> Std. Dev.: 1.4423953593134518
Aug 31, 2024 2:06:26 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.430488029492081 -->> Std. Dev.: 0.0944822885428172
Aug 31, 2024 2:07:39 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.401480785736435 -->> Std. Dev.: 5.231614739193761E-4
Aug 31, 2024 2:08:53 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.401233345663916 -->> Std. Dev.: 0.0
Aug 31, 2024 2:10:07 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.401233345663916 -->> Std. Dev.: 0.0
Aug 31, 2024 2:11:21 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 4.401233345663916 -->> Avg.: 4.401233345663916 -->> Std. Dev.: 0.0

Execution time: 738.705 seconds.



@@;getVariable(5,k)+getVariable(8,k)/getVariable(5,k)+getVariable(6,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k)



Run #4
========
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=12259.295195522014; Expression=4*Math.pow(10,+2)/u7(k)*u3(k)*u1(k)+u6(k)/u9(k)+u5(k)/u5(k)*u5(k); Java Expression: 4*Math.pow(10,+2)/getVariable(7,k)*getVariable(3,k)*getVariable(1,k)+getVariable(6,k)/getVariable(9,k)+getVariable(5,k)/getVariable(5,k)*getVariable(5,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=34.22558542581639; Expression=44*Math.pow(10,-3)*u8(k); Java Expression: 44*Math.pow(10,-3)*getVariable(8,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=32.783836250517254; Expression=4*Math.pow(10,-2)*u3(k); Java Expression: 4*Math.pow(10,-2)*getVariable(3,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=9.490495507051294; Expression=22*Math.pow(10,-5)-4*Math.pow(10,-3)+u5(k)-71*Math.pow(10,-8)-u2(k)/u3(k); Java Expression: 22*Math.pow(10,-5)-4*Math.pow(10,-3)+getVariable(5,k)-71*Math.pow(10,-8)-getVariable(2,k)/getVariable(3,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.280535365310673; Expression=u5(k)+u9(k)/u1(k); Java Expression: getVariable(5,k)+getVariable(9,k)/getVariable(1,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.059461641840322; Expression=u5(k)+u8(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u8(k)+u5(k); Java Expression: getVariable(8,k)+getVariable(5,k)
Aug 31, 2024 2:11:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.420752558560338; Expression=35*Math.pow(10,-2)*u6(k); Java Expression: 35*Math.pow(10,-2)*getVariable(6,k)
Aug 31, 2024 2:11:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.377378667695364; Expression=21*Math.pow(10,-2)*u6(k)*u8(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)
Aug 31, 2024 2:11:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.257825028008173; Expression=22*Math.pow(10,-2)*u6(k)*u8(k); Java Expression: 22*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)
Aug 31, 2024 2:11:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.244490540076018; Expression=21*Math.pow(10,-2)*u6(k)*u8(k)+u8(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)+getVariable(8,k)
Aug 31, 2024 2:11:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.029622961017475; Expression=21*Math.pow(10,-2)*u6(k)*u8(k)+u8(k)/u8(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)+getVariable(8,k)/getVariable(8,k)
Aug 31, 2024 2:12:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.845384516585729; Expression=21*Math.pow(10,-2)*u6(k)*u8(k)+u1(k)/u3(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)+getVariable(1,k)/getVariable(3,k)
Aug 31, 2024 2:12:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.802469582671276; Expression=21*Math.pow(10,-2)*u6(k)*u8(k)+u1(k)/u4(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)+getVariable(1,k)/getVariable(4,k)
Aug 31, 2024 2:12:07 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.802469582671276 -->> Avg.: 203423.62250048912 -->> Std. Dev.: 904642.580870458
Aug 31, 2024 2:12:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.788318982474237; Expression=21*Math.pow(10,-2)*u6(k)*u8(k)+u1(k)/u9(k); Java Expression: 21*Math.pow(10,-2)*getVariable(6,k)*getVariable(8,k)+getVariable(1,k)/getVariable(9,k)
Aug 31, 2024 2:12:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.744368503064712; Expression=2*Math.pow(10,-1)*u6(k)*u8(k)+u1(k)/u9(k); Java Expression: 2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(1,k)/getVariable(9,k)
Aug 31, 2024 2:12:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.674585891484112; Expression=2*Math.pow(10,-1)*u6(k)*u8(k)+u6(k)/u9(k); Java Expression: 2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(6,k)/getVariable(9,k)
Aug 31, 2024 2:12:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.631296174304221; Expression=2*Math.pow(10,-1)*u6(k)*u8(k)+u6(k)/u5(k); Java Expression: 2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(6,k)/getVariable(5,k)
Aug 31, 2024 2:13:00 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.631296174304221 -->> Avg.: 521.8260622933437 -->> Std. Dev.: 1489.3216259524122
Aug 31, 2024 2:13:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.504687957788016; Expression=2*Math.pow(10,-1)*u6(k)*u8(k)+u2(k)/u4(k); Java Expression: 2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(2,k)/getVariable(4,k)
Aug 31, 2024 2:13:54 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 26.777093564112775 -->> Std. Dev.: 34.938702550764646
Aug 31, 2024 2:14:50 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 11.016803491247392 -->> Std. Dev.: 10.515198943362874
Aug 31, 2024 2:15:46 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.8928624343467115 -->> Std. Dev.: 1.2059971288567486
Aug 31, 2024 2:16:41 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.543222638512332 -->> Std. Dev.: 0.08102735700172989
Aug 31, 2024 2:17:45 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.508768105390589 -->> Std. Dev.: 0.022370098330158388
Aug 31, 2024 2:18:50 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.504687957788016 -->> Std. Dev.: 0.0
Aug 31, 2024 2:19:53 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.504687957788016 -->> Std. Dev.: 0.0
Aug 31, 2024 2:20:56 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 5.504687957788016 -->> Avg.: 5.504687957788016 -->> Std. Dev.: 0.0

Execution time: 574.522 seconds.



@@;2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(2,k)/getVariable(4,k)



Run #5
========
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=44.91581557841163; Expression=u4(k)+u3(k); Java Expression: getVariable(4,k)+getVariable(3,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=34.2940916163534; Expression=u8(k)/u9(k)/u5(k)/u6(k); Java Expression: getVariable(8,k)/getVariable(9,k)/getVariable(5,k)/getVariable(6,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=33.923125514019226; Expression=u4(k)/u6(k); Java Expression: getVariable(4,k)/getVariable(6,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=32.22094356592178; Expression=u2(k)/u1(k); Java Expression: getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=29.724807572501653; Expression=u2(k)/u9(k); Java Expression: getVariable(2,k)/getVariable(9,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=12.864982065424915; Expression=99*Math.pow(10,-8)*90*Math.pow(10,+4)*u9(k); Java Expression: 99*Math.pow(10,-8)*90*Math.pow(10,+4)*getVariable(9,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.731668056345766; Expression=u8(k)+u4(k); Java Expression: getVariable(8,k)+getVariable(4,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.319387369534686; Expression=u5(k)+u8(k)/u9(k); Java Expression: getVariable(5,k)+getVariable(8,k)/getVariable(9,k)
Aug 31, 2024 2:20:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 2:21:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.709785324194373; Expression=32*Math.pow(10,-2)*u7(k); Java Expression: 32*Math.pow(10,-2)*getVariable(7,k)
Aug 31, 2024 2:21:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.131407434512216; Expression=u7(k)-u3(k)-u5(k); Java Expression: getVariable(7,k)-getVariable(3,k)-getVariable(5,k)
Aug 31, 2024 2:21:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427487837859; Expression=u7(k)-u4(k)-u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)
Aug 31, 2024 2:21:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077426268333519; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-8)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-8)*getVariable(5,k)
Aug 31, 2024 2:21:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077420577364661; Expression=u7(k)-u4(k)-u5(k)-85*Math.pow(10,-8)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-85*Math.pow(10,-8)*getVariable(5,k)
Aug 31, 2024 2:21:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077305556636008; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-6)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-6)*getVariable(5,k)
Aug 31, 2024 2:21:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.07693999616118; Expression=u7(k)-u4(k)-u5(k)-60*Math.pow(10,-6)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-60*Math.pow(10,-6)*getVariable(5,k)
Aug 31, 2024 2:21:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.073947542541404; Expression=u7(k)-u4(k)-u5(k)-43*Math.pow(10,-5)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-43*Math.pow(10,-5)*getVariable(5,k)
Aug 31, 2024 2:21:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.975267366742534; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(5,k)
Aug 31, 2024 2:21:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.898369790901422; Expression=u7(k)-u4(k)-u5(k)-38*Math.pow(10,-3)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-38*Math.pow(10,-3)*getVariable(5,k)
Aug 31, 2024 2:21:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.894781265258659; Expression=u7(k)-u4(k)-u5(k)-43*Math.pow(10,-3)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-43*Math.pow(10,-3)*getVariable(5,k)
Aug 31, 2024 2:21:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8946700629369015; Expression=u7(k)-u4(k)-u5(k)-45*Math.pow(10,-3)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-45*Math.pow(10,-3)*getVariable(5,k)
Aug 31, 2024 2:21:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.894631045144101; Expression=u7(k)-u4(k)-u5(k)-44*Math.pow(10,-3)*u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-44*Math.pow(10,-3)*getVariable(5,k)
Aug 31, 2024 2:21:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8785540133481105; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u6(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(6,k)
Aug 31, 2024 2:21:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.858290176561242; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u7(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(7,k)
Aug 31, 2024 2:21:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.840445849434849; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u6(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(6,k)/getVariable(8,k)
Aug 31, 2024 2:21:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.827052916715172; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u1(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(1,k)
Aug 31, 2024 2:21:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8115116453796585; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:21:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.798794737076585; Expression=u7(k)-u4(k)-u5(k)-24*Math.pow(10,-3)*u1(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-24*Math.pow(10,-3)*getVariable(1,k)
Aug 31, 2024 2:21:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.781962517656102; Expression=u7(k)-u4(k)-u5(k)-19*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-19*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:21:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.773962606559371; Expression=u7(k)-u4(k)-u5(k)-26*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-26*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:21:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.770546337559646; Expression=u7(k)-u4(k)-u5(k)-24*Math.pow(10,-3)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-24*Math.pow(10,-3)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:21:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.751028113009752; Expression=u7(k)-u4(k)-u5(k)-24*Math.pow(10,-3)*u1(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-24*Math.pow(10,-3)*getVariable(1,k)/getVariable(8,k)
Aug 31, 2024 2:21:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.73043960813449; Expression=u7(k)-u4(k)-u5(k)-24*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-24*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:21:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.711822621611183; Expression=u7(k)-u4(k)-u5(k)-26*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-26*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:21:54 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.697814989085198; Expression=u7(k)-u4(k)-u5(k)-30*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-30*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:21:58 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.697814989085198 -->> Avg.: 206328.32730181582 -->> Std. Dev.: 906667.1754935032
Aug 31, 2024 2:22:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.682058089244825; Expression=u7(k)-u4(k)-u5(k)-30*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-30*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.64204604450267; Expression=u7(k)-u4(k)-u5(k)-45*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-45*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.636334994117231; Expression=u7(k)-u4(k)-u5(k)-44*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-44*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.633789874635946; Expression=u7(k)-u4(k)-u5(k)-36*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-36*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.631818324119172; Expression=u7(k)-u4(k)-u5(k)-43*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-43*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.627224721923782; Expression=u7(k)-u4(k)-u5(k)-38*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-38*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.625741572388263; Expression=u7(k)-u4(k)-u5(k)-39*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-39*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.625459561663983; Expression=u7(k)-u4(k)-u5(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:22:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.625459561663982; Expression=u7(k)-u4(k)-u5(k)-u6(k)+u6(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(6,k)+getVariable(6,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:23:04 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.625459561663982 -->> Avg.: 540.1457673486437 -->> Std. Dev.: 1493.2010774279427
Aug 31, 2024 2:23:54 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.622953670005303; Expression=u7(k)-u4(k)-u5(k)-18*Math.pow(10,-1)+u8(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-18*Math.pow(10,-1)+getVariable(8,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:23:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.598824321362266; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-1)+u8(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-1)+getVariable(8,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:08 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 5.598824321362266 -->> Avg.: 32.39900793655008 -->> Std. Dev.: 44.084441492391704
Aug 31, 2024 2:24:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.598686041776308; Expression=u7(k)-u4(k)-u5(k)-9*Math.pow(10,-1)+u8(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-9*Math.pow(10,-1)+getVariable(8,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.594241991449507; Expression=u7(k)-u4(k)-u5(k)-10*Math.pow(10,-1)+u8(k)-40*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-10*Math.pow(10,-1)+getVariable(8,k)-40*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.5735105110121745; Expression=u7(k)-u4(k)-u5(k)-9*Math.pow(10,-1)+u8(k)-45*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-9*Math.pow(10,-1)+getVariable(8,k)-45*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.54503606073197; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)+u8(k)-54*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)+getVariable(8,k)-54*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.544783318869675; Expression=u7(k)-u4(k)-u5(k)-40*Math.pow(10,-3)+u8(k)-54*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-40*Math.pow(10,-3)+getVariable(8,k)-54*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.544746295448953; Expression=u7(k)-u4(k)-u5(k)-45*Math.pow(10,-3)+u8(k)-54*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-45*Math.pow(10,-3)+getVariable(8,k)-54*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.544633739015907; Expression=u7(k)-u4(k)-u5(k)-99*Math.pow(10,-3)+u8(k)-54*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-99*Math.pow(10,-3)+getVariable(8,k)-54*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.544622284331016; Expression=u7(k)-u4(k)-u5(k)-73*Math.pow(10,-3)+u8(k)-54*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-73*Math.pow(10,-3)+getVariable(8,k)-54*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.542629828546688; Expression=u7(k)-u4(k)-u5(k)-73*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-73*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.541144122125354; Expression=u7(k)-u4(k)-u5(k)-45*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-45*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.540893664801824; Expression=u7(k)-u4(k)-u5(k)-40*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-40*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.539708901830852; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:24:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.539485458009663; Expression=u7(k)-u4(k)-u5(k)-10*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-10*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.539052089931189; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-8)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-8)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.539052084202264; Expression=u7(k)-u4(k)-u5(k)-15*Math.pow(10,-9)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-15*Math.pow(10,-9)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.538636730225847; Expression=u7(k)-u4(k)-u5(k)+10*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+10*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.537498836502486; Expression=u7(k)-u4(k)-u5(k)+40*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+40*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.536434642674998; Expression=u7(k)-u4(k)-u5(k)+73*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+73*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.535734598902852; Expression=u7(k)-u4(k)-u5(k)+99*Math.pow(10,-3)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+99*Math.pow(10,-3)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:16 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 5.535734598902852 -->> Avg.: 11.511613772206685 -->> Std. Dev.: 11.56539787428742
Aug 31, 2024 2:25:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.534443362529687; Expression=u7(k)-u4(k)-u5(k)+3*Math.pow(10,-1)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+3*Math.pow(10,-1)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.534173369485022; Expression=u7(k)-u4(k)-u5(k)+2*Math.pow(10,-1)+u8(k)-58*Math.pow(10,-3)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+2*Math.pow(10,-1)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:25:47 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.516204153631096; Expression=u7(k)-u4(k)-u5(k)+18*Math.pow(10,-1)+u8(k)-58*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+18*Math.pow(10,-1)+getVariable(8,k)-58*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:26:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.507324729803072; Expression=u7(k)-u4(k)-u5(k)+18*Math.pow(10,-1)+u8(k)-60*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+18*Math.pow(10,-1)+getVariable(8,k)-60*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:26:24 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 5.507324729803072 -->> Avg.: 5.904743414534829 -->> Std. Dev.: 1.5351574262060874
Aug 31, 2024 2:26:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.506643483438349; Expression=u7(k)-u4(k)-u5(k)+19*Math.pow(10,-1)+u8(k)-60*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+19*Math.pow(10,-1)+getVariable(8,k)-60*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:26:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.505446801199014; Expression=u7(k)-u4(k)-u5(k)+19*Math.pow(10,-1)+u8(k)-64*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+19*Math.pow(10,-1)+getVariable(8,k)-64*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:27:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.490483118656671; Expression=u7(k)-u4(k)-u5(k)+23*Math.pow(10,-1)+u8(k)-64*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+23*Math.pow(10,-1)+getVariable(8,k)-64*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:27:34 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 5.490483118656671 -->> Avg.: 5.57057304446098 -->> Std. Dev.: 0.057358179008770306
Aug 31, 2024 2:27:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.472519875151501; Expression=u7(k)-u4(k)-u5(k)+49*Math.pow(10,-1)+u8(k)-99*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+49*Math.pow(10,-1)+getVariable(8,k)-99*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:27:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3704995336322305; Expression=u7(k)-u4(k)-u5(k)+58*Math.pow(10,-1)+u8(k)-99*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+58*Math.pow(10,-1)+getVariable(8,k)-99*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:27:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.368094738362611; Expression=u7(k)-u4(k)-u5(k)+60*Math.pow(10,-1)+u8(k)-99*Math.pow(10,-3)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+60*Math.pow(10,-1)+getVariable(8,k)-99*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:28:40 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 5.368094738362611 -->> Avg.: 5.522946713958535 -->> Std. Dev.: 0.07881021450289112
Aug 31, 2024 2:29:47 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 5.368094738362611 -->> Avg.: 5.473032972565567 -->> Std. Dev.: 0.0800878885556647
Aug 31, 2024 2:30:54 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 5.368094738362611 -->> Avg.: 5.434217114184614 -->> Std. Dev.: 0.07219931630712456
Aug 31, 2024 2:32:00 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 5.368094738362611 -->> Avg.: 5.403098981232698 -->> Std. Dev.: 0.058158941438426794

Execution time: 664.242 seconds.



@@;getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+60*Math.pow(10,-1)+getVariable(8,k)-99*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k)



Run #6
========
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=184597.19731461784; Expression=22*Math.pow(10,+4)*84*Math.pow(10,-2)+u3(k)-u7(k)-u7(k); Java Expression: 22*Math.pow(10,+4)*84*Math.pow(10,-2)+getVariable(3,k)-getVariable(7,k)-getVariable(7,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5703.81185158787; Expression=57*Math.pow(10,+2)+u4(k); Java Expression: 57*Math.pow(10,+2)+getVariable(4,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=113.99560137652063; Expression=u8(k)-u1(k); Java Expression: getVariable(8,k)-getVariable(1,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=34.294105730687455; Expression=4*Math.pow(10,-8)*u4(k); Java Expression: 4*Math.pow(10,-8)*getVariable(4,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=31.579812173929795; Expression=u8(k)*u8(k); Java Expression: getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=12.647558941578618; Expression=49*Math.pow(10,+9)/68*Math.pow(10,-9)*u9(k); Java Expression: 49*Math.pow(10,+9)/68*Math.pow(10,-9)*getVariable(9,k)
Aug 31, 2024 2:32:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.398031711605155; Expression=u9(k)-u9(k)+u4(k); Java Expression: getVariable(9,k)-getVariable(9,k)+getVariable(4,k)
Aug 31, 2024 2:32:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.907174206296354; Expression=u5(k)-u8(k); Java Expression: getVariable(5,k)-getVariable(8,k)
Aug 31, 2024 2:32:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.33037036582409; Expression=44*Math.pow(10,-4)+u5(k); Java Expression: 44*Math.pow(10,-4)+getVariable(5,k)
Aug 31, 2024 2:32:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 2:32:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.510766764119078; Expression=10*Math.pow(10,+2)/u4(k)+2*Math.pow(10,+2)*u8(k)/96*Math.pow(10,-6)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(4,k)+2*Math.pow(10,+2)*getVariable(8,k)/96*Math.pow(10,-6)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.053960890414428; Expression=34*Math.pow(10,-2)*u7(k); Java Expression: 34*Math.pow(10,-2)*getVariable(7,k)
Aug 31, 2024 2:32:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.011279224818125; Expression=3*Math.pow(10,-1)*u7(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 2:32:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.927312997094895; Expression=10*Math.pow(10,+2)/u4(k)+2*Math.pow(10,+2)*u1(k)/53*Math.pow(10,-2)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(4,k)+2*Math.pow(10,+2)*getVariable(1,k)/53*Math.pow(10,-2)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.925081573422961; Expression=10*Math.pow(10,+2)/u4(k)+2*Math.pow(10,+2)*u1(k)/55*Math.pow(10,-2)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(4,k)+2*Math.pow(10,+2)*getVariable(1,k)/55*Math.pow(10,-2)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.780883602472543; Expression=31*Math.pow(10,-2)*u7(k); Java Expression: 31*Math.pow(10,-2)*getVariable(7,k)
Aug 31, 2024 2:32:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.597138307721471; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/55*Math.pow(10,-2)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/55*Math.pow(10,-2)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.5437569871779155; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u6(k)/55*Math.pow(10,-2)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(6,k)/55*Math.pow(10,-2)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.515301118239617; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/55*Math.pow(10,-2)+u7(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/55*Math.pow(10,-2)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.462287589667134; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/34*Math.pow(10,-2)+u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/34*Math.pow(10,-2)+getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.437512725068851; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/44*Math.pow(10,-2)+u7(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/44*Math.pow(10,-2)+getVariable(7,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.269217621947453; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/55*Math.pow(10,-2)*u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/55*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.643739212251305; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/55*Math.pow(10,-2)*u1(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/55*Math.pow(10,-2)*getVariable(1,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.446046831476314; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u1(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(1,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2807305269889095; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:32:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.278271387676481; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/74*Math.pow(10,-2)*u6(k)/u4(k)*u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/74*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)
Aug 31, 2024 2:33:06 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.278271387676481 -->> Avg.: 528822.9558000762 -->> Std. Dev.: 2263874.0244347122
Aug 31, 2024 2:33:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.265807119864838; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-3)-27*Math.pow(10,-3)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-3)-27*Math.pow(10,-3)/getVariable(4,k)
Aug 31, 2024 2:33:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.265629211720376; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-3)-61*Math.pow(10,-3)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-3)-61*Math.pow(10,-3)/getVariable(4,k)
Aug 31, 2024 2:33:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.177469269068753; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-2)-27*Math.pow(10,-3)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-2)-27*Math.pow(10,-3)/getVariable(4,k)
Aug 31, 2024 2:33:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.173755012687056; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-2)-27*Math.pow(10,-3)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-2)-27*Math.pow(10,-3)/getVariable(8,k)
Aug 31, 2024 2:33:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.1705706933193385; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-78*Math.pow(10,-2)-27*Math.pow(10,-3)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-78*Math.pow(10,-2)-27*Math.pow(10,-3)/getVariable(8,k)
Aug 31, 2024 2:33:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.166478285631941; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-86*Math.pow(10,-2)-27*Math.pow(10,-3)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-86*Math.pow(10,-2)-27*Math.pow(10,-3)/getVariable(8,k)
Aug 31, 2024 2:33:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.118928764015891; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-2)-53*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-2)-53*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.105325711208311; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-73*Math.pow(10,-2)-73*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-2)-73*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.102706897330251; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-55*Math.pow(10,-2)-73*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-55*Math.pow(10,-2)-73*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.085303650813606; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u6(k)/u4(k)*u8(k)-55*Math.pow(10,-2)-99*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(6,k)/getVariable(4,k)*getVariable(8,k)-55*Math.pow(10,-2)-99*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.061629291864247; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-55*Math.pow(10,-2)-73*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-55*Math.pow(10,-2)-73*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.023425063634745; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-73*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-73*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.022121011550885; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-74*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-74*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.020724049536143; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-55*Math.pow(10,-2)-99*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-55*Math.pow(10,-2)-99*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.009727892686006; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.996418547372506; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/73*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/73*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.987015052143374; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:52 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.973558053215526; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:52 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.960226317541141; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-73*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-73*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.959798115034997; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-74*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-74*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:33:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.956187325525365; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:34:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.954456527888416; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-73*Math.pow(10,-2)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-73*Math.pow(10,-2)-84*Math.pow(10,-2)-84*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:34:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.953467793284619; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-84*Math.pow(10,-2)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:34:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.948520189966597; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-96*Math.pow(10,-2)/getVariable(8,k)
Aug 31, 2024 2:34:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.941861957285202; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:34:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.932947288498694; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-2*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-2*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:34:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.923125715709553; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:34:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.921374355333344; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-55*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-55*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:34:28 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 4.921374355333344 -->> Avg.: 799.2379741324529 -->> Std. Dev.: 2201.0822316158356
Aug 31, 2024 2:34:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.920195359633867; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:34:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.920131697578905; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.9126148442027135; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.906995969102052; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/70*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/70*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.9045559969288055; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-10*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-10*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.902219291441082; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-10*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-10*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.901744603007598; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-34*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-34*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.901361420327605; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/71*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-2*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/71*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-2*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.886759047147691; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/70*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-10*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/70*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-10*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.880969333467463; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/68*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/68*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-55*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:35:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.874172717789882; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/68*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-16*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/68*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-84*Math.pow(10,-2)-16*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:02 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 4.874172717789882 -->> Avg.: 30.25288968151779 -->> Std. Dev.: 42.199370675169234
Aug 31, 2024 2:36:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.861664880424611; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/68*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/68*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-61*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.859744444030299; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/68*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/68*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.858706683338369; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/68*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-71*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/68*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-71*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.837058137795698; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.812465278611427; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.804703287738284; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-16*Math.pow(10,-1)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-16*Math.pow(10,-1)-34*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.804427370950782; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.804397995607711; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-16*Math.pow(10,-1)-21*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-16*Math.pow(10,-1)-21*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:36:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.800498414380793; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-21*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-21*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:37:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.797583216163329; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-68*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-68*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:37:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.796410155580408; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/63*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/63*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-61*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:37:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.790685963894574; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:37:40 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 4.790685963894574 -->> Avg.: 10.808452809981418 -->> Std. Dev.: 11.209613487376933
Aug 31, 2024 2:37:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.790591025273958; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-94*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-94*Math.pow(10,-2)-34*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:39:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.790574866842688; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-94*Math.pow(10,-2)-33*Math.pow(10,-2)-34*Math.pow(10,-1)/u8(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-94*Math.pow(10,-2)-33*Math.pow(10,-2)-34*Math.pow(10,-1)/getVariable(8,k)
Aug 31, 2024 2:39:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.76120072114622; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-94*Math.pow(10,-2)-34*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-94*Math.pow(10,-2)-34*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:39:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.75285179108175; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-94*Math.pow(10,-2)-61*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-94*Math.pow(10,-2)-61*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:39:19 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 4.75285179108175 -->> Avg.: 5.322112661001546 -->> Std. Dev.: 1.5481603444939915
Aug 31, 2024 2:39:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.752842968619445; Expression=10*Math.pow(10,+2)/u3(k)+2*Math.pow(10,+2)*u1(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-61*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+2*Math.pow(10,+2)*getVariable(1,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-61*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:40:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.669321196462746; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-61*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-61*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:40:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.669209564177229; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-63*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-63*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:40:51 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 4.669209564177229 -->> Avg.: 4.8600714844183805 -->> Std. Dev.: 0.13421819140642632
Aug 31, 2024 2:41:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.66918359808992; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/61*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-65*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/61*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-65*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:42:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.653430041026431; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-65*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-65*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:42:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.624414176788956; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-96*Math.pow(10,-2)-96*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:42:30 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 4.624414176788956 -->> Avg.: 4.780417850117755 -->> Std. Dev.: 0.09163113200878836
Aug 31, 2024 2:42:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.623821196470573; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-97*Math.pow(10,-2)-96*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-97*Math.pow(10,-2)-96*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:43:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.623249769953425; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-97*Math.pow(10,-2)-97*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-97*Math.pow(10,-2)-97*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:43:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.622699905230522; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-97*Math.pow(10,-2)-98*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-97*Math.pow(10,-2)-98*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:43:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.6221716099969825; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-98*Math.pow(10,-2)-98*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-98*Math.pow(10,-2)-98*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:44:04 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 4.6221716099969825 -->> Avg.: 4.723562159844983 -->> Std. Dev.: 0.08029951355143204
Aug 31, 2024 2:44:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.616144490929545; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-12*Math.pow(10,-1)-96*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-12*Math.pow(10,-1)-96*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:44:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.616070400197878; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-12*Math.pow(10,-1)-97*Math.pow(10,-2)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-12*Math.pow(10,-1)-97*Math.pow(10,-2)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:44:16 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.616017972021651; Expression=10*Math.pow(10,+2)/u3(k)+u2(k)*u6(k)/58*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(2,k)*getVariable(6,k)/58*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:45:39 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 4.616017972021651 -->> Avg.: 4.682262048556265 -->> Std. Dev.: 0.06823607184172231
Aug 31, 2024 2:46:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.570527546972575; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u1(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:46:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.36677984836855; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u3(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-98*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(3,k)
Aug 31, 2024 2:46:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.354920517415918; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u3(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(3,k)
Aug 31, 2024 2:46:27 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.351143165385109; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(4,k)
Aug 31, 2024 2:46:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.3465186455258165; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-98*Math.pow(10,-2)-u2(k)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-98*Math.pow(10,-2)-getVariable(2,k)/getVariable(4,k)
Aug 31, 2024 2:46:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.34647914152377; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-10*Math.pow(10,-1)-u2(k)/u4(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-10*Math.pow(10,-1)-getVariable(2,k)/getVariable(4,k)
Aug 31, 2024 2:46:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.314963666476968; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-12*Math.pow(10,-1)-getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:46:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.236693461479187; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-58*Math.pow(10,-2)-58*Math.pow(10,-2)-u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-58*Math.pow(10,-2)-58*Math.pow(10,-2)-getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:46:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.234712299972939; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-12*Math.pow(10,-2)-10*Math.pow(10,-1)-u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-12*Math.pow(10,-2)-10*Math.pow(10,-1)-getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:46:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.220971006975002; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-10*Math.pow(10,-2)-12*Math.pow(10,-1)*u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-10*Math.pow(10,-2)-12*Math.pow(10,-1)*getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:46:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.217378726315181; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)-12*Math.pow(10,-1)*u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)-12*Math.pow(10,-1)*getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:47:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.216155879545745; Expression=10*Math.pow(10,+2)/u3(k)+u3(k)*u6(k)/12*Math.pow(10,-2)*u7(k)/u4(k)*u8(k)+10*Math.pow(10,-2)-12*Math.pow(10,-1)*u2(k)/u5(k); Java Expression: 10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)+10*Math.pow(10,-2)-12*Math.pow(10,-1)*getVariable(2,k)/getVariable(5,k)
Aug 31, 2024 2:47:15 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 4.216155879545745 -->> Avg.: 4.607118772420561 -->> Std. Dev.: 0.13310429699864573

Execution time: 915.821 seconds.



@@;10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)+10*Math.pow(10,-2)-12*Math.pow(10,-1)*getVariable(2,k)/getVariable(5,k)



Run #7
========
Aug 31, 2024 2:47:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=31.364329660644167; Expression=u1(k)/u3(k)/u2(k)-u6(k)+29*Math.pow(10,+1)/u6(k)+13*Math.pow(10,-6)+u6(k); Java Expression: getVariable(1,k)/getVariable(3,k)/getVariable(2,k)-getVariable(6,k)+29*Math.pow(10,+1)/getVariable(6,k)+13*Math.pow(10,-6)+getVariable(6,k)
Aug 31, 2024 2:47:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=27.675602335273336; Expression=1*Math.pow(10,+2)-u1(k); Java Expression: 1*Math.pow(10,+2)-getVariable(1,k)
Aug 31, 2024 2:47:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.398035369649726; Expression=1*Math.pow(10,-5)*u5(k)/u5(k)+u4(k); Java Expression: 1*Math.pow(10,-5)*getVariable(5,k)/getVariable(5,k)+getVariable(4,k)
Aug 31, 2024 2:47:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.051831393433616; Expression=99*Math.pow(10,-5)/u2(k)/u8(k)*u4(k)+u5(k)-u4(k)-u8(k)+u3(k)-u8(k); Java Expression: 99*Math.pow(10,-5)/getVariable(2,k)/getVariable(8,k)*getVariable(4,k)+getVariable(5,k)-getVariable(4,k)-getVariable(8,k)+getVariable(3,k)-getVariable(8,k)
Aug 31, 2024 2:47:19 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.330404861123133; Expression=74*Math.pow(10,+2)*39*Math.pow(10,-8)+u5(k); Java Expression: 74*Math.pow(10,+2)*39*Math.pow(10,-8)+getVariable(5,k)
Aug 31, 2024 2:47:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 2:47:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.961154853597194; Expression=72*Math.pow(10,-8)-u8(k)-59*Math.pow(10,-2)+u8(k)+u5(k)+u8(k); Java Expression: 72*Math.pow(10,-8)-getVariable(8,k)-59*Math.pow(10,-2)+getVariable(8,k)+getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 2:47:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.961154826604505; Expression=43*Math.pow(10,-8)-u8(k)-59*Math.pow(10,-2)+u8(k)+u5(k)+u8(k); Java Expression: 43*Math.pow(10,-8)-getVariable(8,k)-59*Math.pow(10,-2)+getVariable(8,k)+getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 2:47:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.077427487837859; Expression=u7(k)-u4(k)-u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)
Aug 31, 2024 2:47:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.971348693033856; Expression=u7(k)-u4(k)-u5(k)-u2(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(2,k)/getVariable(6,k)
Aug 31, 2024 2:47:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.91966783857765; Expression=u7(k)-u4(k)-u5(k)-u7(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(7,k)/getVariable(6,k)
Aug 31, 2024 2:47:40 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.909545370829546; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u6(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(6,k)
Aug 31, 2024 2:47:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.881133703141468; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u5(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(5,k)
Aug 31, 2024 2:47:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.809063882215368; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u9(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)
Aug 31, 2024 2:47:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.773546919891798; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u2(k)/u1(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(2,k)/getVariable(1,k)
Aug 31, 2024 2:47:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.763815916217507; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u1(k)/u9(k)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(1,k)/getVariable(9,k)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:47:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.722588369839564; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u2(k)/u7(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(2,k)/getVariable(7,k)
Aug 31, 2024 2:47:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.721376684952654; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u2(k)/u2(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(2,k)/getVariable(2,k)
Aug 31, 2024 2:47:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.705425664212777; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u1(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(1,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:47:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.701358186660354; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u7(k)/u9(k)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(7,k)/getVariable(9,k)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:47:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.700991222938386; Expression=u7(k)-u4(k)-u5(k)-u3(k)/u4(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(3,k)/getVariable(4,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:47:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.672883778061564; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u1(k)/u9(k)*u1(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(1,k)/getVariable(9,k)*getVariable(1,k)+getVariable(8,k)
Aug 31, 2024 2:47:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.6720923484913275; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u6(k)/u9(k)*u7(k)/u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(6,k)/getVariable(9,k)*getVariable(7,k)/getVariable(8,k)
Aug 31, 2024 2:48:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.613142754217172; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u6(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(6,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:48:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.464349793718189; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u3(k)+u8(k)-u1(k)/u6(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(3,k)+getVariable(8,k)-getVariable(1,k)/getVariable(6,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:48:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.451729194455648; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u4(k)+u8(k)-u1(k)/u6(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(4,k)+getVariable(8,k)-getVariable(1,k)/getVariable(6,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:48:20 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.451729194455648 -->> Avg.: 509781.51627529063 -->> Std. Dev.: 2258534.7906835955
Aug 31, 2024 2:49:26 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.451729194455648 -->> Avg.: 870.9390828447567 -->> Std. Dev.: 2322.79594529763
Aug 31, 2024 2:50:41 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 5.451729194455648 -->> Avg.: 35.35869533414954 -->> Std. Dev.: 55.087792719426844
Aug 31, 2024 2:51:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.426704848402709; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u4(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u9(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(4,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(9,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:51:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.397670775672461; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u4(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(4,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:51:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3901904592979255; Expression=u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:51:57 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 5.3901904592979255 -->> Avg.: 11.131972317189067 -->> Std. Dev.: 11.31194275896526
Aug 31, 2024 2:53:18 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 5.3901904592979255 -->> Avg.: 5.700487380661776 -->> Std. Dev.: 1.0476482306209947
Aug 31, 2024 2:54:41 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 5.3901904592979255 -->> Avg.: 5.4278810934624255 -->> Std. Dev.: 0.0367527656125519
Aug 31, 2024 2:56:10 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 5.3901904592979255 -->> Avg.: 5.41368936562935 -->> Std. Dev.: 0.029653614859579704
Aug 31, 2024 2:56:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.390188495321943; Expression=22*Math.pow(10,-6)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 22*Math.pow(10,-6)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:56:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.388270993382905; Expression=22*Math.pow(10,-3)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 22*Math.pow(10,-3)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:57:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.3876789501319; Expression=29*Math.pow(10,-3)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 29*Math.pow(10,-3)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:57:21 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.382255678181795; Expression=99*Math.pow(10,-3)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 99*Math.pow(10,-3)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:57:50 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 5.382255678181795 -->> Avg.: 5.4010970507843155 -->> Std. Dev.: 0.02400741406576818
Aug 31, 2024 2:58:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.372071854451056; Expression=29*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 29*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:58:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.371986826644328; Expression=67*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 67*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:58:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.359722757069013; Expression=67*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 67*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:58:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.33417425898045; Expression=99*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 99*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:58:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.329802815663116; Expression=11*Math.pow(10,-1)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-11*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 11*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-11*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:59:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.305764707986608; Expression=29*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u8(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 29*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(8,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:59:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.296597595732077; Expression=99*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u8(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 99*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(8,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:59:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.289307818380778; Expression=67*Math.pow(10,-2)+u7(k)-u4(k)-u5(k)-u8(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u1(k)/u4(k)*u7(k)+u8(k); Java Expression: 67*Math.pow(10,-2)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(8,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(1,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:59:35 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 5.289307818380778 -->> Avg.: 5.381242912230242 -->> Std. Dev.: 0.02377310286387097
Aug 31, 2024 2:59:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.190611716895783; Expression=39*Math.pow(10,-1)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 39*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 2:59:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.17890119522772; Expression=40*Math.pow(10,-1)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 40*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:00:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.166397550731179; Expression=40*Math.pow(10,-1)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-21*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 40*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-21*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:01:20 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.150824278736174; Expression=47*Math.pow(10,-1)+u7(k)-u4(k)-u5(k)-u1(k)/u9(k)+u8(k)-22*Math.pow(10,-3)*u7(k)/u4(k)*u7(k)+u8(k); Java Expression: 47*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:01:23 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 5.150824278736174 -->> Avg.: 5.340603335197833 -->> Std. Dev.: 0.08221509208928547

Execution time: 848.94 seconds.



@@;47*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k)



Run #8
========
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.2485840494865865E7; Expression=76*Math.pow(10,+5)*u1(k)*68*Math.pow(10,-3)-u7(k); Java Expression: 76*Math.pow(10,+5)*getVariable(1,k)*68*Math.pow(10,-3)-getVariable(7,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=192.38856121001277; Expression=44*Math.pow(10,-4)+u2(k)*u8(k)-u9(k)+u4(k)-u9(k); Java Expression: 44*Math.pow(10,-4)+getVariable(2,k)*getVariable(8,k)-getVariable(9,k)+getVariable(4,k)-getVariable(9,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=34.294105437907646; Expression=65*Math.pow(10,-6)/u4(k); Java Expression: 65*Math.pow(10,-6)/getVariable(4,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=32.97824692709183; Expression=u7(k)/u1(k); Java Expression: getVariable(7,k)/getVariable(1,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=28.8886205987779; Expression=13*Math.pow(10,-5)+u8(k)-u8(k)/u5(k)*u9(k)*u8(k)/u5(k)+u6(k)*u8(k)/u3(k); Java Expression: 13*Math.pow(10,-5)+getVariable(8,k)-getVariable(8,k)/getVariable(5,k)*getVariable(9,k)*getVariable(8,k)/getVariable(5,k)+getVariable(6,k)*getVariable(8,k)/getVariable(3,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=14.777335628316218; Expression=51*Math.pow(10,-6)+u9(k); Java Expression: 51*Math.pow(10,-6)+getVariable(9,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=14.371970159022082; Expression=44*Math.pow(10,-2)*u7(k); Java Expression: 44*Math.pow(10,-2)*getVariable(7,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=11.833723939120251; Expression=70*Math.pow(10,+2)/u2(k); Java Expression: 70*Math.pow(10,+2)/getVariable(2,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=10.934928616533515; Expression=53*Math.pow(10,-2)-81*Math.pow(10,-9)*u4(k)*u6(k)+u6(k)*u2(k)/25*Math.pow(10,-2)+u5(k); Java Expression: 53*Math.pow(10,-2)-81*Math.pow(10,-9)*getVariable(4,k)*getVariable(6,k)+getVariable(6,k)*getVariable(2,k)/25*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 3:01:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=9.967290595586022; Expression=38*Math.pow(10,-2)*u1(k); Java Expression: 38*Math.pow(10,-2)*getVariable(1,k)
Aug 31, 2024 3:01:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.328267399478195; Expression=22*Math.pow(10,-2)+u5(k); Java Expression: 22*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 3:01:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 3:01:36 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.723266199267171; Expression=18*Math.pow(10,+1)/u2(k)*u5(k); Java Expression: 18*Math.pow(10,+1)/getVariable(2,k)*getVariable(5,k)
Aug 31, 2024 3:01:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.293818213588942; Expression=17*Math.pow(10,+1)/u2(k)*u5(k); Java Expression: 17*Math.pow(10,+1)/getVariable(2,k)*getVariable(5,k)
Aug 31, 2024 3:01:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.011279224818125; Expression=3*Math.pow(10,-1)*u7(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:52 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.011256182117579; Expression=88*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k); Java Expression: 88*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:53 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.011048844109075; Expression=88*Math.pow(10,-5)+3*Math.pow(10,-1)*u7(k); Java Expression: 88*Math.pow(10,-5)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.909125286665967; Expression=44*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k); Java Expression: 44*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.810798111787676; Expression=u4(k)/u5(k)+44*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k); Java Expression: getVariable(4,k)/getVariable(5,k)+44*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.778210617702847; Expression=u5(k)/u5(k)+44*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k); Java Expression: getVariable(5,k)/getVariable(5,k)+44*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.76892362988238; Expression=u5(k)/u5(k)+66*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k); Java Expression: getVariable(5,k)/getVariable(5,k)+66*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:01:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.70787632245259; Expression=38*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+u9(k)/u5(k); Java Expression: 38*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(9,k)/getVariable(5,k)
Aug 31, 2024 3:02:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.705969138579689; Expression=88*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+u9(k)/u5(k); Java Expression: 88*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(9,k)/getVariable(5,k)
Aug 31, 2024 3:02:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.702261813929055; Expression=63*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+u9(k)/u5(k); Java Expression: 63*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(9,k)/getVariable(5,k)
Aug 31, 2024 3:02:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.684231594079024; Expression=38*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+u9(k)/u3(k); Java Expression: 38*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(9,k)/getVariable(3,k)
Aug 31, 2024 3:02:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.679666286035691; Expression=63*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+u9(k)/u4(k); Java Expression: 63*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(9,k)/getVariable(4,k)
Aug 31, 2024 3:02:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.422651490314606; Expression=88*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 88*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.4153108791008515; Expression=79*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 79*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.397447729312612; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.3974461979253086; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.3974423343222275; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+36*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+36*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.397440182577447; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+56*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+56*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.397438481035735; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+79*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+79*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:13 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.39743788506601; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.237863406104321; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-4)+u8(k)+92*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-4)+getVariable(8,k)+92*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.237127595939761; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+62*Math.pow(10,-4)+u8(k)+92*Math.pow(10,-4)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+62*Math.pow(10,-4)+getVariable(8,k)+92*Math.pow(10,-4)+getVariable(8,k)
Aug 31, 2024 3:02:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.235618543534829; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-4)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-4)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.1698428105947265; Expression=3*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-4)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-4)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:28 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.169248368762555; Expression=3*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k)+92*Math.pow(10,-4)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)+92*Math.pow(10,-4)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.167491339005336; Expression=3*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k)+3*Math.pow(10,-4)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)+3*Math.pow(10,-4)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.16743291835588; Expression=3*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k)+3*Math.pow(10,-6)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)+3*Math.pow(10,-6)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.167431738282429; Expression=3*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k)-3*Math.pow(10,-6)+u8(k)+3*Math.pow(10,-5)+u8(k); Java Expression: 3*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)-3*Math.pow(10,-6)+getVariable(8,k)+3*Math.pow(10,-5)+getVariable(8,k)
Aug 31, 2024 3:02:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.812016325416639; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 3:02:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.76602839542214; Expression=3*Math.pow(10,-6)+3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k); Java Expression: 3*Math.pow(10,-6)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 3:02:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.766028011747602; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)
Aug 31, 2024 3:02:45 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.766028011747602 -->> Avg.: 467096.0373246416 -->> Std. Dev.: 2086599.1553622491
Aug 31, 2024 3:02:54 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.749580448222407; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*84*Math.pow(10,-9)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*84*Math.pow(10,-9)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:02:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.717052274341403; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-5)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-5)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.706297116089912; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u4(k)*3*Math.pow(10,-5)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(4,k)*3*Math.pow(10,-5)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.676099202796727; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u7(k)*3*Math.pow(10,-5)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(7,k)*3*Math.pow(10,-5)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.676004849039329; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-5)+u8(k)*u7(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-5)+getVariable(8,k)*getVariable(7,k)/getVariable(2,k)
Aug 31, 2024 3:03:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.665710543990651; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-63*Math.pow(10,-2)+3*Math.pow(10,-1)*u7(k)*84*Math.pow(10,-9)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-63*Math.pow(10,-2)+3*Math.pow(10,-1)*getVariable(7,k)*84*Math.pow(10,-9)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.64373985435285; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-4)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-4)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.626617822946304; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*18*Math.pow(10,-5)+u8(k)*u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*18*Math.pow(10,-5)+getVariable(8,k)*getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:04 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.4313871323005225; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-4)+u8(k)*u7(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-4)+getVariable(8,k)*getVariable(7,k)/getVariable(2,k)
Aug 31, 2024 3:03:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.405008345442581; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.361160128758125; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u5(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(5,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(6,k)
Aug 31, 2024 3:03:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.312451264455861; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u4(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(4,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.273907157635548; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u2(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(2,k)
Aug 31, 2024 3:03:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.251164692767929; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u7(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(7,k)
Aug 31, 2024 3:03:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.2432158919085765; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u9(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(9,k)
Aug 31, 2024 3:03:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.242596339304927; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u4(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(4,k)/getVariable(6,k)
Aug 31, 2024 3:03:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.23508311123464; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:04:19 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 5.23508311123464 -->> Avg.: 635.2225267969105 -->> Std. Dev.: 1700.6171578049643
Aug 31, 2024 3:04:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.229801424993165; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u4(k)/u6(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(4,k)/getVariable(6,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:04:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.22481442362885; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-u3(k)/u6(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-getVariable(3,k)/getVariable(6,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:18 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.157189519234235; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-92*Math.pow(10,-4)+u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-92*Math.pow(10,-4)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.0874159481090695; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)+u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:22 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.014562641628525; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-92*Math.pow(10,-4)+u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-92*Math.pow(10,-4)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:25 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.004104853474907; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*3*Math.pow(10,-4)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*3*Math.pow(10,-4)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.946536738590025; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.8535325494873245; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)-3*Math.pow(10,-4)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)-3*Math.pow(10,-4)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.853363129750188; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-4)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-4)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.777414153276925; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:05:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.744729270280958; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:05:49 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.738226010987459; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)+u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)+getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:05:51 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 4.738226010987459 -->> Avg.: 31.33014331357473 -->> Std. Dev.: 42.83138967284771
Aug 31, 2024 3:05:52 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.7302203252816994; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)+u8(k)/u3(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)+getVariable(8,k)/getVariable(3,k)
Aug 31, 2024 3:05:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.710148951154526; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+3*Math.pow(10,-1)+u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)+u8(k)/u8(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+3*Math.pow(10,-1)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)+getVariable(8,k)/getVariable(8,k)
Aug 31, 2024 3:05:56 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.417128905967524; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:05:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.415684581231921; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)+u8(k)/u3(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)+getVariable(8,k)/getVariable(3,k)
Aug 31, 2024 3:06:03 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.410897150713647; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u5(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(5,k)/getVariable(6,k)
Aug 31, 2024 3:06:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.387308745822807; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:06:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.386640693120983; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*66*Math.pow(10,-5)/u8(k)-u3(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*66*Math.pow(10,-5)/getVariable(8,k)-getVariable(3,k)/getVariable(6,k)
Aug 31, 2024 3:07:07 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.127580110874153; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*64*Math.pow(10,-5)/94*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*64*Math.pow(10,-5)/94*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:07:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.120789896664169; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*66*Math.pow(10,-5)/94*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*66*Math.pow(10,-5)/94*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:07:30 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 4.120789896664169 -->> Avg.: 11.09762006346593 -->> Std. Dev.: 11.4058438747544
Aug 31, 2024 3:07:35 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.117725075270173; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)+u8(k)*u8(k)-u2(k)*u3(k)*68*Math.pow(10,-5)/94*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)+getVariable(8,k)*getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*68*Math.pow(10,-5)/94*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:08:53 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 4.117725075270173 -->> Avg.: 5.3666230261428804 -->> Std. Dev.: 1.6533982921352703
Aug 31, 2024 3:09:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.092029618489801; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u8(k)+u8(k)-u2(k)*u3(k)*68*Math.pow(10,-5)/94*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(8,k)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*68*Math.pow(10,-5)/94*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:09:23 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.068830438771972; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u8(k)+u8(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(8,k)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:09:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.0509884048020375; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u8(k)+u8(k)-u2(k)*u3(k)*74*Math.pow(10,-5)/94*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(8,k)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*74*Math.pow(10,-5)/94*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:09:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.042559286851685; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u8(k)+u8(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(8,k)+getVariable(8,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:09:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.984630865892322; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u3(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(3,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:10:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.9680705203569566; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u3(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(3,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:10:17 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 3.9680705203569566 -->> Avg.: 4.6325421699598905 -->> Std. Dev.: 0.5827646024301142
Aug 31, 2024 3:10:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.965926123153375; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u3(k)-u2(k)*u4(k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(3,k)-getVariable(2,k)*getVariable(4,k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:11:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.9457298898369024; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u4(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/74*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:11:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.9317842498789872; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u4(k)-u2(k)*u3(k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*62*Math.pow(10,-5)/68*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:11:41 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 3.9317842498789872 -->> Avg.: 4.340802262845905 -->> Std. Dev.: 0.45058100775068144
Aug 31, 2024 3:13:05 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 3.9317842498789872 -->> Avg.: 4.097520718267031 -->> Std. Dev.: 0.19309604283013415
Aug 31, 2024 3:13:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.9316859369016424; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u4(k)-u2(k)*u3(k)*60*Math.pow(10,-5)/68*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*60*Math.pow(10,-5)/68*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:14:29 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 3.9316859369016424 -->> Avg.: 4.0014486405122724 -->> Std. Dev.: 0.08035683786980058
Aug 31, 2024 3:14:48 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3.930805716347006; Expression=3*Math.pow(10,-1)*u7(k)+u8(k)*u8(k)*u6(k)/u4(k)-u2(k)*u3(k)*60*Math.pow(10,-5)/67*Math.pow(10,+4)/u8(k)/u6(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*60*Math.pow(10,-5)/67*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)
Aug 31, 2024 3:15:53 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 3.930805716347006 -->> Avg.: 3.9648765993332145 -->> Std. Dev.: 0.05848429781127731

Execution time: 869.647 seconds.



@@;3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*60*Math.pow(10,-5)/67*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k)



Run #9
========
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.235515675417378E8; Expression=u7(k)-u6(k)+u8(k)*u6(k)+u9(k)*18*Math.pow(10,+6)-u2(k)*u2(k)/u8(k)*u4(k); Java Expression: getVariable(7,k)-getVariable(6,k)+getVariable(8,k)*getVariable(6,k)+getVariable(9,k)*18*Math.pow(10,+6)-getVariable(2,k)*getVariable(2,k)/getVariable(8,k)*getVariable(4,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=701347.7721814401; Expression=21*Math.pow(10,+3)*u5(k); Java Expression: 21*Math.pow(10,+3)*getVariable(5,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=3077.6326652818284; Expression=u1(k)*u4(k); Java Expression: getVariable(1,k)*getVariable(4,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=153.76485365167923; Expression=u7(k)+u1(k); Java Expression: getVariable(7,k)+getVariable(1,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=94.81972176607587; Expression=u2(k)-u3(k); Java Expression: getVariable(2,k)-getVariable(3,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=65.7247729980101; Expression=50*Math.pow(10,-1)-u4(k); Java Expression: 50*Math.pow(10,-1)-getVariable(4,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=15.83415985501775; Expression=2*Math.pow(10,-1)*u6(k); Java Expression: 2*Math.pow(10,-1)*getVariable(6,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=14.656134136280876; Expression=34*Math.pow(10,-6)*91*Math.pow(10,-5)*u6(k)+u9(k)-u4(k)+u5(k)+u2(k)/u4(k); Java Expression: 34*Math.pow(10,-6)*91*Math.pow(10,-5)*getVariable(6,k)+getVariable(9,k)-getVariable(4,k)+getVariable(5,k)+getVariable(2,k)/getVariable(4,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.343616201716141; Expression=70*Math.pow(10,-2)+u5(k); Java Expression: 70*Math.pow(10,-2)+getVariable(5,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.330471200749155; Expression=96*Math.pow(10,-5)/u6(k)+u5(k); Java Expression: 96*Math.pow(10,-5)/getVariable(6,k)+getVariable(5,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.330470820856531; Expression=24*Math.pow(10,-6)+u5(k); Java Expression: 24*Math.pow(10,-6)+getVariable(5,k)
Aug 31, 2024 3:15:58 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.037566583667516; Expression=u5(k)+u8(k); Java Expression: getVariable(5,k)+getVariable(8,k)
Aug 31, 2024 3:16:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=8.001334501448671; Expression=u8(k)+u5(k)+85*Math.pow(10,-2)/u5(k)-u3(k)/u2(k); Java Expression: getVariable(8,k)+getVariable(5,k)+85*Math.pow(10,-2)/getVariable(5,k)-getVariable(3,k)/getVariable(2,k)
Aug 31, 2024 3:16:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.88853422559345; Expression=72*Math.pow(10,-2)+55*Math.pow(10,+2)/u2(k); Java Expression: 72*Math.pow(10,-2)+55*Math.pow(10,+2)/getVariable(2,k)
Aug 31, 2024 3:16:05 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.862169539990488; Expression=55*Math.pow(10,+2)/u2(k); Java Expression: 55*Math.pow(10,+2)/getVariable(2,k)
Aug 31, 2024 3:16:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.86210724545796; Expression=72*Math.pow(10,-4)+55*Math.pow(10,+2)/u2(k); Java Expression: 72*Math.pow(10,-4)+55*Math.pow(10,+2)/getVariable(2,k)
Aug 31, 2024 3:16:08 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.862087945763841; Expression=96*Math.pow(10,-4)+55*Math.pow(10,+2)/u2(k); Java Expression: 96*Math.pow(10,-4)+55*Math.pow(10,+2)/getVariable(2,k)
Aug 31, 2024 3:16:09 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.011279224818125; Expression=3*Math.pow(10,-1)*u7(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:12 AM data.NormalizedDataTable evaluate
INFO: Best FIT=7.009397315205788; Expression=72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k); Java Expression: 72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.938766061317679; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.936647362553804; Expression=96*Math.pow(10,-4)+3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 96*Math.pow(10,-4)+3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.796454127681393; Expression=12*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 12*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:15 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.782531117206853; Expression=23*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 23*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.78066472404409; Expression=14*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 14*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:26 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.766732215799077; Expression=18*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k); Java Expression: 18*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)
Aug 31, 2024 3:16:29 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.4049113076205; Expression=u4(k)/u1(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: getVariable(4,k)/getVariable(1,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.40466972784939; Expression=72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:32 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.397447783089516; Expression=3*Math.pow(10,-1)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-1)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.39077626575831; Expression=3*Math.pow(10,-1)*u7(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.390683794850066; Expression=72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:38 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.387823343729731; Expression=3*Math.pow(10,-1)*u7(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-1)*getVariable(7,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.317168114612002; Expression=u8(k)*u3(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: getVariable(8,k)*getVariable(3,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:43 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.276730128745722; Expression=72*Math.pow(10,-4)+53*Math.pow(10,-8)+u9(k)*u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+53*Math.pow(10,-8)+getVariable(9,k)*getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.276730128187894; Expression=72*Math.pow(10,-4)+50*Math.pow(10,-8)+u9(k)*u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+50*Math.pow(10,-8)+getVariable(9,k)*getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:44 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.1562832586208085; Expression=72*Math.pow(10,-4)+53*Math.pow(10,-8)+u7(k)*u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+53*Math.pow(10,-8)+getVariable(7,k)*getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:46 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.1562831979364265; Expression=72*Math.pow(10,-4)+9*Math.pow(10,-8)+u7(k)*u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+9*Math.pow(10,-8)+getVariable(7,k)*getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:47 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.1552942996730895; Expression=u8(k)*u7(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: getVariable(8,k)*getVariable(7,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:47 AM data.NormalizedDataTable evaluate
INFO: Best FIT=6.07264182310545; Expression=72*Math.pow(10,-4)+u8(k)-u3(k)/u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:50 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.977407314716556; Expression=72*Math.pow(10,-4)+u8(k)-u7(k)/u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.976607211319366; Expression=23*Math.pow(10,-8)+u8(k)-u7(k)/u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 23*Math.pow(10,-8)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.976607190428424; Expression=41*Math.pow(10,-9)+u8(k)-u7(k)/u8(k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 41*Math.pow(10,-9)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*72*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:55 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.967504780140957; Expression=41*Math.pow(10,-9)+u8(k)-u7(k)/u8(k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 41*Math.pow(10,-9)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.925034585240457; Expression=72*Math.pow(10,-4)+u8(k)-u7(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.924475281856596; Expression=3*Math.pow(10,-4)+u8(k)-u7(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-4)+getVariable(8,k)-getVariable(7,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:16:59 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.812749288851489; Expression=41*Math.pow(10,-3)+u8(k)-u2(k)/u8(k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 41*Math.pow(10,-3)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.810740229401407; Expression=41*Math.pow(10,-5)+u8(k)-u2(k)/u8(k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 41*Math.pow(10,-5)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.8107365489669025; Expression=33*Math.pow(10,-5)+u8(k)-u2(k)/u8(k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 33*Math.pow(10,-5)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.810721380675841; Expression=41*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 41*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*76*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:02 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742783886522235; Expression=3*Math.pow(10,-4)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-4)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:06 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.74278293838934; Expression=73*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 73*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:09 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 10% performed ... -- Fitness info -->> Best: 5.74278293838934 -->> Avg.: 761755.9825959391 -->> Std. Dev.: 3944530.4136573104
Aug 31, 2024 3:17:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938235715; Expression=24*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 24*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:11 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938173017; Expression=4*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 4*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:14 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938169883; Expression=3*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 3*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938166745; Expression=2*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 2*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:33 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938163607; Expression=1*Math.pow(10,-9)+u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 1*Math.pow(10,-9)+getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:34 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.742782938160475; Expression=u8(k)-u2(k)/u8(k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*96*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:37 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.733586664724118; Expression=u8(k)-u2(k)/u8(k)*99*Math.pow(10,-4)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: getVariable(8,k)-getVariable(2,k)/getVariable(8,k)*99*Math.pow(10,-4)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.567542616385196; Expression=72*Math.pow(10,-4)+u8(k)-u3(k)/u8(k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:39 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.567149885032213; Expression=96*Math.pow(10,-4)+u8(k)-u3(k)/u8(k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 96*Math.pow(10,-4)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:41 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.495920294041748; Expression=72*Math.pow(10,-2)+u8(k)-u3(k)/u8(k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 72*Math.pow(10,-2)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.492450599990885; Expression=96*Math.pow(10,-2)+u8(k)-u3(k)/u8(k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 96*Math.pow(10,-2)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*72*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:51 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.470947099828986; Expression=96*Math.pow(10,-2)+u8(k)-u3(k)/u8(k)*75*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 96*Math.pow(10,-2)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*75*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:17:57 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.365710079420954; Expression=96*Math.pow(10,-2)+u8(k)-u3(k)/u8(k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 96*Math.pow(10,-2)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:01 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.326392616851005; Expression=18*Math.pow(10,-1)+u8(k)-u3(k)/u8(k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 18*Math.pow(10,-1)+getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:10 AM data.NormalizedDataTable evaluate
INFO: Best FIT=5.1237131553426165; Expression=18*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 18*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:17 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.9958322770355865; Expression=23*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 23*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*96*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:30 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.9730244753778186; Expression=23*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 23*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.960128217418084; Expression=24*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 24*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:45 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.952511864160724; Expression=27*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 27*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:18:56 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 20% performed ... -- Fitness info -->> Best: 4.952511864160724 -->> Avg.: 778.5329912548683 -->> Std. Dev.: 2177.944734682377
Aug 31, 2024 3:20:42 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.949855816001115; Expression=26*Math.pow(10,-1)*u8(k)-u3(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 26*Math.pow(10,-1)*getVariable(8,k)-getVariable(3,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:20:46 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 30% performed ... -- Fitness info -->> Best: 4.949855816001115 -->> Avg.: 31.325431254041273 -->> Std. Dev.: 45.71508746084827
Aug 31, 2024 3:22:34 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 40% performed ... -- Fitness info -->> Best: 4.949855816001115 -->> Avg.: 10.880507043445556 -->> Std. Dev.: 10.8822789642264
Aug 31, 2024 3:23:24 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.932720491076427; Expression=27*Math.pow(10,-1)*38*Math.pow(10,-1)-u2(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 27*Math.pow(10,-1)*38*Math.pow(10,-1)-getVariable(2,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:23:31 AM data.NormalizedDataTable evaluate
INFO: Best FIT=4.324587685326792; Expression=33*Math.pow(10,-1)*38*Math.pow(10,-1)-u2(k)/u8(k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*u7(k)+u8(k); Java Expression: 33*Math.pow(10,-1)*38*Math.pow(10,-1)-getVariable(2,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)
Aug 31, 2024 3:24:06 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 50% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 5.498779008621699 -->> Std. Dev.: 1.3235624010312819
Aug 31, 2024 3:25:23 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 60% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 4.875839557302096 -->> Std. Dev.: 0.40640220371527913
Aug 31, 2024 3:26:42 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 70% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 4.658988287414781 -->> Std. Dev.: 0.31243409338281003
Aug 31, 2024 3:27:57 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 80% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 4.536291906852539 -->> Std. Dev.: 0.2958561191102541
Aug 31, 2024 3:29:11 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 90% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 4.414130318124746 -->> Std. Dev.: 0.2188258252592893
Aug 31, 2024 3:30:26 AM jeco.core.algorithm.ga.SimpleGeneticAlgorithm execute
INFO: 100% performed ... -- Fitness info -->> Best: 4.324587685326792 -->> Avg.: 4.324587685326792 -->> Std. Dev.: 0.0

Execution time: 10097.054 seconds.



@@;33*Math.pow(10,-1)*38*Math.pow(10,-1)-getVariable(2,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)




 Execution report
==================

#Run;Obj.;Model;Time
0;5.225891760316978;73*Math.pow(10,+1)*73*Math.pow(10,-2)/getVariable(7,k)+getVariable(7,k)-82*Math.pow(10,-5)*getVariable(7,k)*getVariable(1,k)+91*Math.pow(10,-3)*getVariable(5,k)-getVariable(5,k)-getVariable(3,k);1072.528
1;5.551381810572879;getVariable(7,k)-getVariable(5,k)-getVariable(3,k)+30*Math.pow(10,+3)/getVariable(1,k)/getVariable(7,k)-getVariable(7,k)/getVariable(3,k);856.004
2;3.9923855657160137;getVariable(8,k)*getVariable(6,k)/17*Math.pow(10,-3)/getVariable(8,k)*45*Math.pow(10,+2)+getVariable(7,k)/getVariable(4,k)*getVariable(5,k)/getVariable(7,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k)*getVariable(8,k);772.449
3;4.401233345663916;getVariable(5,k)+getVariable(8,k)/getVariable(5,k)+getVariable(6,k)*getVariable(8,k)/getVariable(5,k)*getVariable(8,k)-94*Math.pow(10,+1)/getVariable(6,k)/getVariable(8,k);738.705
4;5.504687957788016;2*Math.pow(10,-1)*getVariable(6,k)*getVariable(8,k)+getVariable(2,k)/getVariable(4,k);574.522
5;5.368094738362611;getVariable(7,k)-getVariable(4,k)-getVariable(5,k)+60*Math.pow(10,-1)+getVariable(8,k)-99*Math.pow(10,-3)*getVariable(7,k)+getVariable(8,k);664.242
6;4.216155879545745;10*Math.pow(10,+2)/getVariable(3,k)+getVariable(3,k)*getVariable(6,k)/12*Math.pow(10,-2)*getVariable(7,k)/getVariable(4,k)*getVariable(8,k)+10*Math.pow(10,-2)-12*Math.pow(10,-1)*getVariable(2,k)/getVariable(5,k);915.821
7;5.150824278736174;47*Math.pow(10,-1)+getVariable(7,k)-getVariable(4,k)-getVariable(5,k)-getVariable(1,k)/getVariable(9,k)+getVariable(8,k)-22*Math.pow(10,-3)*getVariable(7,k)/getVariable(4,k)*getVariable(7,k)+getVariable(8,k);848.94
8;3.930805716347006;3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k)*getVariable(8,k)*getVariable(6,k)/getVariable(4,k)-getVariable(2,k)*getVariable(3,k)*60*Math.pow(10,-5)/67*Math.pow(10,+4)/getVariable(8,k)/getVariable(6,k);869.647
9;4.324587685326792;33*Math.pow(10,-1)*38*Math.pow(10,-1)-getVariable(2,k)/getVariable(8,k)*99*Math.pow(10,-3)+3*Math.pow(10,-1)*getVariable(7,k)+getVariable(8,k);10097.054
